/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.qarisiqmallar.veneramarket;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shamil
 */
public class ChronologyOfOperations extends javax.swing.JFrame {

    Connection con;
    PreparedStatement pres;
    ResultSet rs;
    ResultSet rs2;
    DefaultTableModel df;

    public ChronologyOfOperations() {
        initComponents();
        load();

        buttonGroup1.add(rbBugun);
        buttonGroup1.add(dunen);
        buttonGroup1.add(sonUcGun);
        buttonGroup1.add(sonBirHefte);
        buttonGroup1.add(sonBirAy);
        rbBugun.doClick();
    }

    public Connection connect() {
        try {

            //Class.forName("com.mysql.jdbc.Driver");
            String url = ("jdbc:mysql://localhost:3306/mehsullar");
            String usercategoryOfProduct = ("root");
            String password = ("dxdiag92");
            con = DriverManager.getConnection(url, usercategoryOfProduct, password);

        } catch (Exception ex) {

        }

        return con;

    }

    public void load() {
        int a;
        int B;
        try {

            con = connect();
            pres = con.prepareStatement("select * from updatedcapitalbudget");
            rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();

            df = (DefaultTableModel) tblChronologyOfOperations.getModel();
            df.setRowCount(0);
            while (rs.next()) {

                Vector v2 = new Vector();

                int id = rs.getInt("id");
                double AmountOfCapitalBudget = rs.getDouble("AmountOfCapitalBudget");
                double processedValue = rs.getDouble("processedValue");
                String from = rs.getString("From");
                String date = rs.getString("date");
                String status = rs.getString("status");
                String commentary = rs.getString("commentary");

                v2.add(id);
                v2.add(AmountOfCapitalBudget);
                v2.add(processedValue);
                v2.add(from);
                v2.add(date);
                v2.add(status);
                v2.add(commentary);

                df.addRow(v2);

            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblChronologyOfOperations = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbOptionForResult = new javax.swing.JComboBox<>();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        rbBugun = new javax.swing.JRadioButton();
        sonUcGun = new javax.swing.JRadioButton();
        sonBirAy = new javax.swing.JRadioButton();
        dunen = new javax.swing.JRadioButton();
        sonBirHefte = new javax.swing.JRadioButton();
        ilkTarix = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        sonTarix = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setForeground(new java.awt.Color(102, 102, 102));

        tblChronologyOfOperations.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        tblChronologyOfOperations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "№", "Cari büdce mebleği", "Cari tranzaksiya mebleği", "Kimden veya haradan", "Tarix", "+/-", "Qeydler"
            }
        ));
        tblChronologyOfOperations.setRowHeight(25);
        jScrollPane1.setViewportView(tblChronologyOfOperations);
        if (tblChronologyOfOperations.getColumnModel().getColumnCount() > 0) {
            tblChronologyOfOperations.getColumnModel().getColumn(0).setPreferredWidth(33);
            tblChronologyOfOperations.getColumnModel().getColumn(0).setMaxWidth(35);
            tblChronologyOfOperations.getColumnModel().getColumn(1).setPreferredWidth(130);
            tblChronologyOfOperations.getColumnModel().getColumn(1).setMaxWidth(200);
            tblChronologyOfOperations.getColumnModel().getColumn(2).setPreferredWidth(170);
            tblChronologyOfOperations.getColumnModel().getColumn(2).setMaxWidth(200);
            tblChronologyOfOperations.getColumnModel().getColumn(3).setPreferredWidth(450);
            tblChronologyOfOperations.getColumnModel().getColumn(3).setMaxWidth(450);
            tblChronologyOfOperations.getColumnModel().getColumn(4).setPreferredWidth(200);
            tblChronologyOfOperations.getColumnModel().getColumn(4).setMaxWidth(200);
            tblChronologyOfOperations.getColumnModel().getColumn(5).setPreferredWidth(70);
            tblChronologyOfOperations.getColumnModel().getColumn(5).setMaxWidth(120);
            tblChronologyOfOperations.getColumnModel().getColumn(6).setPreferredWidth(350);
            tblChronologyOfOperations.getColumnModel().getColumn(6).setMaxWidth(400);
        }

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setText("Axtar..");

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel3.setText("Seçim..");

        cbOptionForResult.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Zulfiyye Eliyeva", "Samil Eliyev", "Ramil Eliyev", "Hecer Eliyeva" }));
        cbOptionForResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbOptionForResultMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cbOptionForResultMousePressed(evt);
            }
        });
        cbOptionForResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOptionForResultActionPerformed(evt);
            }
        });

        jTextField2.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel4.setText("Netice");

        rbBugun.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rbBugun.setForeground(new java.awt.Color(51, 51, 51));
        rbBugun.setText("Bugun");
        rbBugun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBugunActionPerformed(evt);
            }
        });
        rbBugun.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rbBugunKeyPressed(evt);
            }
        });

        sonUcGun.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        sonUcGun.setForeground(new java.awt.Color(51, 51, 51));
        sonUcGun.setText("Son 3 gun");
        sonUcGun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sonUcGunActionPerformed(evt);
            }
        });

        sonBirAy.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        sonBirAy.setForeground(new java.awt.Color(51, 51, 51));
        sonBirAy.setText("Son 1 ay");
        sonBirAy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sonBirAyActionPerformed(evt);
            }
        });

        dunen.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        dunen.setForeground(new java.awt.Color(51, 51, 51));
        dunen.setText("Dunen");
        dunen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dunenActionPerformed(evt);
            }
        });

        sonBirHefte.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        sonBirHefte.setForeground(new java.awt.Color(51, 51, 51));
        sonBirHefte.setText("Son 1hefte");
        sonBirHefte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sonBirHefteActionPerformed(evt);
            }
        });

        ilkTarix.setDateFormatString("yyyy-MM-dd");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Tarix seç..");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("-Tarixdən");

        sonTarix.setDateFormatString("yyyy-MM-dd");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("-Qədər");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ilkTarix, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sonTarix, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rbBugun, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dunen))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(sonBirHefte)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(sonUcGun)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sonBirAy)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 345, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(70, 70, 70)
                                        .addComponent(jLabel4))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(cbOptionForResult, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(98, 98, 98)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(135, 135, 135))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbBugun)
                            .addComponent(sonUcGun)
                            .addComponent(sonBirAy))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dunen)
                            .addComponent(sonBirHefte))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(6, 6, 6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbOptionForResult, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ilkTarix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(sonTarix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rbBugunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBugunActionPerformed

        int a;
        try {

            con = connect();
            pres = con.prepareStatement("select * from updatedcapitalbudget where DATE(date) = CURRENT_DATE");
            rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();

            df = (DefaultTableModel) tblChronologyOfOperations.getModel();
            df.setRowCount(0);
            while (rs.next()) {

                Vector v2 = new Vector();

                int id = rs.getInt("id");
                double AmountOfCapitalBudget = rs.getDouble("AmountOfCapitalBudget");
                double processedValue = rs.getDouble("processedValue");
                String from = rs.getString("From");
                String date = rs.getString("date");
                String status = rs.getString("status");
                String commentary = rs.getString("commentary");

                v2.add(id);
                v2.add(AmountOfCapitalBudget);
                v2.add(processedValue);
                v2.add(from);
                v2.add(date);
                v2.add(status);
                v2.add(commentary);

                df.addRow(v2);

            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }
    }//GEN-LAST:event_rbBugunActionPerformed

    private void rbBugunKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbBugunKeyPressed

    }//GEN-LAST:event_rbBugunKeyPressed

    private void sonUcGunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sonUcGunActionPerformed

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = new GregorianCalendar();
        String ss = sdf.format(cal.getTime());
        cal.add(Calendar.DAY_OF_MONTH, -3);

        String sss = sdf.format(cal.getTime());

        int a;
        try {

            con = connect();
            pres = con.prepareStatement("select * from updatedcapitalbudget where DATE(date) BETWEEN " + "'" + sss + "'" + " and CURRENT_DATE");
            rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();

            df = (DefaultTableModel) tblChronologyOfOperations.getModel();
            df.setRowCount(0);
            while (rs.next()) {

                Vector v2 = new Vector();

                int id = rs.getInt("id");
                double AmountOfCapitalBudget = rs.getDouble("AmountOfCapitalBudget");
                double processedValue = rs.getDouble("processedValue");
                String from = rs.getString("From");
                String date = rs.getString("date");
                String status = rs.getString("status");
                String commentary = rs.getString("commentary");

                v2.add(id);
                v2.add(AmountOfCapitalBudget);
                v2.add(processedValue);
                v2.add(from);
                v2.add(date);
                v2.add(status);
                v2.add(commentary);

                df.addRow(v2);

            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }

    }//GEN-LAST:event_sonUcGunActionPerformed

    private void sonBirAyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sonBirAyActionPerformed

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = new GregorianCalendar();
        cal.add(Calendar.DAY_OF_MONTH, -30);
        String sss = sdf.format(cal.getTime());

        try {
            con = connect();
            pres = con.prepareStatement("select * from updatedcapitalbudget where DATE(date) BETWEEN " + "'" + sss + "'" + " and CURRENT_DATE");
            rs = pres.executeQuery();

            df = (DefaultTableModel) tblChronologyOfOperations.getModel();
            df.setRowCount(0);
            while (rs.next()) {

                Vector v2 = new Vector();

                int id = rs.getInt("id");
                double AmountOfCapitalBudget = rs.getDouble("AmountOfCapitalBudget");
                double processedValue = rs.getDouble("processedValue");
                String from = rs.getString("From");
                String date = rs.getString("date");
                String status = rs.getString("status");
                String commentary = rs.getString("commentary");

                v2.add(id);
                v2.add(AmountOfCapitalBudget);
                v2.add(processedValue);
                v2.add(from);
                v2.add(date);
                v2.add(status);
                v2.add(commentary);

                df.addRow(v2);

            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }
    }//GEN-LAST:event_sonBirAyActionPerformed

    private void dunenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dunenActionPerformed

        int day = 1;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = new GregorianCalendar();
        String ss = sdf.format(cal.getTime());
        cal.add(Calendar.DAY_OF_MONTH, -1);

        String sss = sdf.format(cal.getTime());

        //  System.out.println(ss);
        // System.out.println(sss);
        int a;
        try {

            con = connect();
            pres = con.prepareStatement("select * from updatedcapitalbudget where DATE(date) = " + "'" + sss + "'");
            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();

            df = (DefaultTableModel) tblChronologyOfOperations.getModel();
            df.setRowCount(0);
            while (rs.next()) {

                Vector v2 = new Vector();

                int id = rs.getInt("id");
                double AmountOfCapitalBudget = rs.getDouble("AmountOfCapitalBudget");
                double processedValue = rs.getDouble("processedValue");
                String from = rs.getString("From");
                String date = rs.getString("date");
                String status = rs.getString("status");
                String commentary = rs.getString("commentary");

                v2.add(id);
                v2.add(AmountOfCapitalBudget);
                v2.add(processedValue);
                v2.add(from);
                v2.add(date);
                v2.add(status);
                v2.add(commentary);

                df.addRow(v2);

            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }
    }//GEN-LAST:event_dunenActionPerformed

    private void sonBirHefteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sonBirHefteActionPerformed

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = new GregorianCalendar();
        cal.add(Calendar.DAY_OF_MONTH, -7);
        String sss = sdf.format(cal.getTime());

        try {

            con = connect();
            pres = con.prepareStatement("select * from updatedcapitalbudget where DATE(date) BETWEEN " + "'" + sss + "'" + " and CURRENT_DATE");
            rs = pres.executeQuery();

            df = (DefaultTableModel) tblChronologyOfOperations.getModel();
            df.setRowCount(0);
            while (rs.next()) {

                Vector v2 = new Vector();

                int id = rs.getInt("id");
                double AmountOfCapitalBudget = rs.getDouble("AmountOfCapitalBudget");
                double processedValue = rs.getDouble("processedValue");
                String from = rs.getString("From");
                String date = rs.getString("date");
                String status = rs.getString("status");
                String commentary = rs.getString("commentary");

                v2.add(id);
                v2.add(AmountOfCapitalBudget);
                v2.add(processedValue);
                v2.add(from);
                v2.add(date);
                v2.add(status);
                v2.add(commentary);

                df.addRow(v2);

            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_sonBirHefteActionPerformed

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked


    }//GEN-LAST:event_jLabel7MouseClicked

    private void cbOptionForResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbOptionForResultMouseClicked

    }//GEN-LAST:event_cbOptionForResultMouseClicked

    private void cbOptionForResultMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbOptionForResultMousePressed

    }//GEN-LAST:event_cbOptionForResultMousePressed

    private void cbOptionForResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOptionForResultActionPerformed
       
           boolean checkToday = rbBugun.isSelected();
        boolean checkYesterday = rbBugun.isSelected();
        boolean checkTheLastThreeDay = rbBugun.isSelected();
        boolean checkTheLastWeek = rbBugun.isSelected();
        boolean checkTheLastMonth = rbBugun.isSelected();

        if (checkToday == true){
            resultForTodayWithName();
        }if (checkYesterday == true){
            resultForYesterdayWithName();
        }        
    }//GEN-LAST:event_cbOptionForResultActionPerformed

    public void resultForTodayWithName() {

        String option = cbOptionForResult.getSelectedItem().toString();
        String subString = option.subSequence(0, 3).toString();

        try {

            con = connect();
            pres = con.prepareStatement("select * from updatedcapitalbudget u where DATE(date) = CURRENT_DATE and `From` like  '%' " + "'" + subString + "'" + " '%'");
            rs = pres.executeQuery();

            df = (DefaultTableModel) tblChronologyOfOperations.getModel();
            df.setRowCount(0);
            while (rs.next()) {

                Vector v2 = new Vector();

                int id = rs.getInt("id");
                double AmountOfCapitalBudget = rs.getDouble("AmountOfCapitalBudget");
                double processedValue = rs.getDouble("processedValue");
                String from = rs.getString("From");
                String date = rs.getString("date");
                String status = rs.getString("status");
                String commentary = rs.getString("commentary");

                v2.add(id);
                v2.add(AmountOfCapitalBudget);
                v2.add(processedValue);
                v2.add(from);
                v2.add(date);
                v2.add(status);
                v2.add(commentary);

                df.addRow(v2);

            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }

    }

    public void resultForYesterdayWithName() {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = new GregorianCalendar();
        cal.add(Calendar.DAY_OF_MONTH, -1);
        String sss = sdf.format(cal.getTime());
        
        String option = cbOptionForResult.getSelectedItem().toString();
        String subString = option.subSequence(0, 3).toString();

        try {

            con = connect();
            pres = con.prepareStatement("select * from updatedcapitalbudget where DATE(date) = " + "'" + sss + "'");
            rs = pres.executeQuery();

            df = (DefaultTableModel) tblChronologyOfOperations.getModel();
            df.setRowCount(0);
            while (rs.next()) {

                Vector v2 = new Vector();

                int id = rs.getInt("id");
                double AmountOfCapitalBudget = rs.getDouble("AmountOfCapitalBudget");
                double processedValue = rs.getDouble("processedValue");
                String from = rs.getString("From");
                String date = rs.getString("date");
                String status = rs.getString("status");
                String commentary = rs.getString("commentary");

                v2.add(id);
                v2.add(AmountOfCapitalBudget);
                v2.add(processedValue);
                v2.add(from);
                v2.add(date);
                v2.add(status);
                v2.add(commentary);

                df.addRow(v2);

            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }

    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChronologyOfOperations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChronologyOfOperations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChronologyOfOperations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChronologyOfOperations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChronologyOfOperations().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbOptionForResult;
    private javax.swing.JRadioButton dunen;
    private com.toedter.calendar.JDateChooser ilkTarix;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JRadioButton rbBugun;
    private javax.swing.JRadioButton sonBirAy;
    private javax.swing.JRadioButton sonBirHefte;
    private com.toedter.calendar.JDateChooser sonTarix;
    private javax.swing.JRadioButton sonUcGun;
    private javax.swing.JTable tblChronologyOfOperations;
    // End of variables declaration//GEN-END:variables
}
