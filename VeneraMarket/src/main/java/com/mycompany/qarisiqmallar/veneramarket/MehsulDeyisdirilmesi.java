/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.qarisiqmallar.veneramarket;

import com.mycompany.DaoInter.MehsullarDaoInter;
import com.mycompany.entity.Mehsullar;
import com.mycompany.main.Contex;
import java.sql.Connection;
import java.util.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author samil
 */
public class MehsulDeyisdirilmesi extends javax.swing.JFrame {

    Date date = new Date();
    Calendar calendar;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd ");
    String date2 = sdf.format(date);
    
    public MehsulDeyisdirilmesi() throws SQLException, Exception {
        initComponents();
        connect();
//        tableBorclar();
//        sebetinHesablanmasi();
        txtBarcodeReader.requestFocus();
        buttonGroup1.add(bugun);
        buttonGroup1.add(dunen);
        buttonGroup1.add(umumi);
        umumi.doClick();
        txtSatisTarixi.setText(date2);

    }

    public MehsullarDaoInter mehDao = Contex.instanceOfMehsullarDao();
    Connection con;
    PreparedStatement pres;
    Statement stmt;
    DefaultTableModel df;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableQaytarilanMallar = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        yeniAlinanCem = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLMalinQiymeti = new javax.swing.JLabel();
        TextMalinMiqdari = new javax.swing.JTextField();
        TextMalinAdi = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtMovsumId = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textKateqoriyaId = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtAltKateqoriyaID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtSatisTarixi = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtQiymet = new javax.swing.JTextField();
        txtID = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtUmumi = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cbNagd = new javax.swing.JCheckBox();
        cbNisye = new javax.swing.JCheckBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableYeniGoturulenMallar = new javax.swing.JTable();
        txtBarodeReader = new javax.swing.JTextField();
        txtBarcodeReader = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SecilmisMallar = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        bugun = new javax.swing.JRadioButton();
        dunen = new javax.swing.JRadioButton();
        secilenTarix = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        txtMehsulID = new javax.swing.JTextField();
        txtSatisID = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        umumi = new javax.swing.JRadioButton();
        txtCemGeriQaytarilanMehsullar = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        btnSil = new javax.swing.JButton();
        btnGeriQaytar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1311, 789));

        jPanel1.setBackground(new java.awt.Color(102, 0, 153));
        jPanel1.setPreferredSize(new java.awt.Dimension(1299, 730));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Müştərinin qaytarmaq istədiyi məhsulu seç...");

        tableQaytarilanMallar.setBackground(new java.awt.Color(102, 102, 255));
        tableQaytarilanMallar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        tableQaytarilanMallar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mehsul-ID", "Məhsulun adı", "Məhsul Miqdarı", "Məhsul Qiyməti", "MövsümİD", "KateqoriyaİD", "Alt KateqoriyaİD", "Ümumi Məbləğ", "Satış Tarixi", "SatisID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableQaytarilanMallar);
        if (tableQaytarilanMallar.getColumnModel().getColumnCount() > 0) {
            tableQaytarilanMallar.getColumnModel().getColumn(0).setPreferredWidth(40);
            tableQaytarilanMallar.getColumnModel().getColumn(0).setMaxWidth(70);
            tableQaytarilanMallar.getColumnModel().getColumn(1).setPreferredWidth(250);
            tableQaytarilanMallar.getColumnModel().getColumn(1).setMaxWidth(400);
            tableQaytarilanMallar.getColumnModel().getColumn(4).setMinWidth(3);
            tableQaytarilanMallar.getColumnModel().getColumn(4).setPreferredWidth(2);
            tableQaytarilanMallar.getColumnModel().getColumn(4).setMaxWidth(150);
            tableQaytarilanMallar.getColumnModel().getColumn(5).setMinWidth(3);
            tableQaytarilanMallar.getColumnModel().getColumn(5).setPreferredWidth(2);
            tableQaytarilanMallar.getColumnModel().getColumn(5).setMaxWidth(150);
            tableQaytarilanMallar.getColumnModel().getColumn(6).setMinWidth(3);
            tableQaytarilanMallar.getColumnModel().getColumn(6).setPreferredWidth(2);
            tableQaytarilanMallar.getColumnModel().getColumn(6).setMaxWidth(150);
        }

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Müştərinin qaytardığı məhsulların əvəzinə aldığı məhsullar siyahısı...");

        jTextField1.setBackground(new java.awt.Color(255, 0, 51));
        jTextField1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));

        yeniAlinanCem.setBackground(new java.awt.Color(255, 0, 51));
        yeniAlinanCem.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        yeniAlinanCem.setForeground(new java.awt.Color(255, 255, 255));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 255, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Cəmi yeni məhsullar");
        jLabel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel6.setBackground(new java.awt.Color(102, 153, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel5.setBackground(new java.awt.Color(0, 204, 204));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText(" Malin adi  :");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Malin miqdari :");

        jLMalinQiymeti.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLMalinQiymeti.setForeground(new java.awt.Color(255, 255, 255));
        jLMalinQiymeti.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLMalinQiymeti.setText("Malin qiyməti :");

        TextMalinMiqdari.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TextMalinMiqdari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextMalinMiqdariActionPerformed(evt);
            }
        });
        TextMalinMiqdari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextMalinMiqdariKeyReleased(evt);
            }
        });

        TextMalinAdi.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TextMalinAdi.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TextMalinAdi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextMalinAdiActionPerformed(evt);
            }
        });
        TextMalinAdi.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TextMalinAdiPropertyChange(evt);
            }
        });
        TextMalinAdi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextMalinAdiKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("KateqoriyaID :");

        txtMovsumId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtMovsumId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMovsumIdActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("MovsumID :");

        textKateqoriyaId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        textKateqoriyaId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textKateqoriyaIdActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Alt KateqoriyaID :");

        txtAltKateqoriyaID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtAltKateqoriyaID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAltKateqoriyaIDActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Satış tarixi :");

        txtSatisTarixi.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtSatisTarixi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSatisTarixiActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Ümumi məbləğ :");

        txtQiymet.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtQiymet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQiymetActionPerformed(evt);
            }
        });
        txtQiymet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQiymetKeyReleased(evt);
            }
        });

        txtID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Mehsul ID :");

        txtUmumi.setBackground(new java.awt.Color(255, 0, 0));
        txtUmumi.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtUmumi.setForeground(new java.awt.Color(255, 255, 255));
        txtUmumi.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtUmumi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUmumiActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Ödənişin tipi :");

        cbNagd.setText("Nağd");
        cbNagd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNagdActionPerformed(evt);
            }
        });

        cbNisye.setText("Nisyə");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                        .addComponent(jLMalinQiymeti, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtMovsumId, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TextMalinMiqdari, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtQiymet, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TextMalinAdi, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtUmumi, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSatisTarixi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(textKateqoriyaId, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAltKateqoriyaID, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(cbNagd, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbNisye)))
                .addGap(16, 16, 16))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TextMalinAdi, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextMalinMiqdari, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLMalinQiymeti, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQiymet, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMovsumId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textKateqoriyaId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAltKateqoriyaID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSatisTarixi, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUmumi, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbNagd)
                    .addComponent(cbNisye))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableYeniGoturulenMallar.setBackground(new java.awt.Color(102, 102, 255));
        tableYeniGoturulenMallar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        tableYeniGoturulenMallar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mehsul-ID", "Məhsulun adı", "Məhsul Miqdarı", "Məhsul Qiyməti", "MövsümİD", "KateqoriyaİD", "Alt KateqoriyaİD", "Ümumi Məbləğ", "Satış Tarixi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableYeniGoturulenMallar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableYeniGoturulenMallarMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tableYeniGoturulenMallar);
        if (tableYeniGoturulenMallar.getColumnModel().getColumnCount() > 0) {
            tableYeniGoturulenMallar.getColumnModel().getColumn(0).setPreferredWidth(40);
            tableYeniGoturulenMallar.getColumnModel().getColumn(0).setMaxWidth(70);
            tableYeniGoturulenMallar.getColumnModel().getColumn(1).setPreferredWidth(250);
            tableYeniGoturulenMallar.getColumnModel().getColumn(1).setMaxWidth(400);
        }

        txtBarodeReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBarodeReaderActionPerformed(evt);
            }
        });

        txtBarcodeReader.setBackground(new java.awt.Color(255, 0, 0));
        txtBarcodeReader.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtBarcodeReader.setForeground(new java.awt.Color(255, 255, 255));
        txtBarcodeReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBarcodeReaderActionPerformed(evt);
            }
        });
        txtBarcodeReader.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBarcodeReaderKeyPressed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 0, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        SecilmisMallar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Malin adi", "Miqdari", "Qiymeti", "Umumi", "Satış İD", "Tarix"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(SecilmisMallar);

        jPanel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        bugun.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        bugun.setForeground(new java.awt.Color(255, 0, 0));
        bugun.setText("Bugun");
        bugun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bugunMouseClicked(evt);
            }
        });
        bugun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bugunActionPerformed(evt);
            }
        });

        dunen.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        dunen.setForeground(new java.awt.Color(255, 0, 0));
        dunen.setText("Dunen");
        dunen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dunenActionPerformed(evt);
            }
        });

        secilenTarix.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setText("Məhsul İD");
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });

        txtMehsulID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMehsulIDActionPerformed(evt);
            }
        });

        txtSatisID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSatisIDKeyReleased(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 0, 0));
        jLabel15.setText("Satış İD");

        umumi.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        umumi.setForeground(new java.awt.Color(255, 0, 0));
        umumi.setText("Ümumi");
        umumi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                umumiMouseClicked(evt);
            }
        });
        umumi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                umumiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(umumi, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bugun, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dunen, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(secilenTarix, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtMehsulID, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSatisID, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMehsulID)
                    .addComponent(txtSatisID, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(secilenTarix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bugun, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dunen, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(umumi, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        txtCemGeriQaytarilanMehsullar.setBackground(new java.awt.Color(255, 0, 0));
        txtCemGeriQaytarilanMehsullar.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtCemGeriQaytarilanMehsullar.setForeground(new java.awt.Color(255, 255, 255));
        txtCemGeriQaytarilanMehsullar.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton1.setBackground(new java.awt.Color(0, 255, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Əlavə et");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 0, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Deyisdir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 0, 0));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("X");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        btnSil.setBackground(new java.awt.Color(255, 51, 0));
        btnSil.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnSil.setForeground(new java.awt.Color(255, 255, 255));
        btnSil.setIcon(new javax.swing.ImageIcon("C:\\GitHubProject\\VeneraMarket-2\\VeneraMarket\\src\\main\\java\\pictures\\Delete-icon.png")); // NOI18N
        btnSil.setText("Sil");
        btnSil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSilActionPerformed(evt);
            }
        });

        btnGeriQaytar.setBackground(new java.awt.Color(0, 0, 255));
        btnGeriQaytar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnGeriQaytar.setForeground(new java.awt.Color(255, 255, 255));
        btnGeriQaytar.setText("Geri Qaytar");
        btnGeriQaytar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeriQaytarActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 0, 0));
        jButton4.setText("Deyişiklik et");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSil)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCemGeriQaytarilanMehsullar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtBarodeReader, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yeniAlinanCem, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtBarcodeReader, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 904, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 904, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel2))
                            .addComponent(btnGeriQaytar))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                        .addComponent(txtBarodeReader, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtBarcodeReader)
                        .addComponent(jButton5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnGeriQaytar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(yeniAlinanCem, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSil, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCemGeriQaytarilanMehsullar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jButton2)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1305, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBarodeReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBarodeReaderActionPerformed

        sebet_2_ye_AddProsessi();
    }//GEN-LAST:event_txtBarodeReaderActionPerformed

    private void cbNagdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNagdActionPerformed

    }//GEN-LAST:event_cbNagdActionPerformed

    private void txtUmumiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUmumiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUmumiActionPerformed

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    private void txtQiymetKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQiymetKeyReleased

        deyisiklik();
    }//GEN-LAST:event_txtQiymetKeyReleased

    private void txtQiymetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQiymetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQiymetActionPerformed

    private void txtSatisTarixiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSatisTarixiActionPerformed

    }//GEN-LAST:event_txtSatisTarixiActionPerformed

    private void txtAltKateqoriyaIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAltKateqoriyaIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAltKateqoriyaIDActionPerformed

    private void textKateqoriyaIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textKateqoriyaIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textKateqoriyaIdActionPerformed

    private void txtMovsumIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMovsumIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMovsumIdActionPerformed

    private void TextMalinAdiKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextMalinAdiKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TextMalinAdiKeyReleased

    private void TextMalinAdiPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TextMalinAdiPropertyChange

    }//GEN-LAST:event_TextMalinAdiPropertyChange

    private void TextMalinAdiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextMalinAdiActionPerformed

        sebet_2_ye_AddProsessi();
    }//GEN-LAST:event_TextMalinAdiActionPerformed

    private void TextMalinMiqdariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextMalinMiqdariKeyReleased
        
        deyisiklik();

    }//GEN-LAST:event_TextMalinMiqdariKeyReleased

    
    
    private void TextMalinMiqdariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextMalinMiqdariActionPerformed
        
        
    }//GEN-LAST:event_TextMalinMiqdariActionPerformed

    private void bugunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bugunActionPerformed
        bugunSatilanMehsullar();
    }//GEN-LAST:event_bugunActionPerformed

    private void dunenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dunenActionPerformed

        dunenSatilanMehsullar();
    }//GEN-LAST:event_dunenActionPerformed

    public void buTarixdeSatilanMehsullar(){
       
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
         
          Date  birinciTarix = secilenTarix.getDate();
          String sss = sdf.format(secilenTarix.getDate());
         
         
    int a;
        try {

            pres = con.prepareCall("SELECT\n"
                    + "	s.id,\n"
                    + "	s.Satis_ID,\n"
                    + "	s.Malin_adi,\n"
                    + "	s.Miqdari,\n"
                    + "	s.Movsum_id,\n"
                    + "	s.Kateqoriya_id,\n"
                    + "	s.Alt_kateqoriya_id,\n"
                    + "	s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                    + " m.Satis_miqdari, \n"
                    + "	m.Alis_qiymeti,\n"
                    + " m.Satisin_toplam_deyeri, \n"
                    + "	s.Satis_qiymeti,\n"
                    + "	m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                    + "	s.Satis_Tarixi,\n"
                    + "	( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir \n"
                    + "FROM\n"
                    + "	satilan_mallar s\n"
                    + "	LEFT JOIN mehsullar m ON m.id = s.id \n"
                    + "WHERE Date (s.Satis_Tarixi) = "+"'"+sss+"'");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    v2.add(rs.getDouble("Satis_Meblegi_Cem"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));
                    v2.add(rs.getInt("Satis_ID"));

                }
                df.addRow(v2);

            }

        } catch (SQLException ex) {
            ex.printStackTrace();

        }
     
    }
    
    private void txtMehsulIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMehsulIDActionPerformed


    }//GEN-LAST:event_txtMehsulIDActionPerformed

    
    public void deyisiklik(){
       
        DecimalFormat dformater = new DecimalFormat("#.##");

            double s = Double.parseDouble(TextMalinMiqdari.getText());

            double aaa = Double.parseDouble(txtQiymet.getText());

            double cem = (s * aaa);

            String formattedCem = dformater.format(cem);

            txtUmumi.setText(formattedCem);

}

    
    public void satisEmeliyyati() {
        
    Date date = new Date();
    Calendar calendar;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd ");
    String date2 = sdf.format(date);
        
        

      double cemYeniGoturulen = Double.parseDouble(yeniAlinanCem.getText());
      double CemGeriQaytarilanMehsullar = Double.parseDouble(txtCemGeriQaytarilanMehsullar.getText());
      double qaliq = cemYeniGoturulen - CemGeriQaytarilanMehsullar;
      //double qaliq2 = CemGeriQaytarilanMehsullar - cemYeniGoturulen;
        
        boolean yoxla = cbNisye.isSelected();

        df = (DefaultTableModel) tableYeniGoturulenMallar.getModel();
        if (df.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Səbət boşdur!");
        } else {
            String ID, Malin_adi, Miqdari, Qiymeti, Movsum_ID, Kateqoriya_ID, Alt_Kateqoriya_ID, Ümumi_Məbləğ, Tarix;
            try {
                connect();

                try {
                    if (yoxla != false) {

                        BorcYazmaq borcSiyahisi = new BorcYazmaq();
                        borcSiyahisi.setVisible(true);

                    } else {

                        for (int i = 0; i < df.getRowCount(); i++) {

                            ID = df.getValueAt(i, 0).toString();
                            Malin_adi = df.getValueAt(i, 1).toString();
                            Miqdari = df.getValueAt(i, 2).toString();
                            Qiymeti = df.getValueAt(i, 3).toString();
                            Movsum_ID = df.getValueAt(i, 4).toString();
                            Kateqoriya_ID = df.getValueAt(i, 5).toString();
                            Alt_Kateqoriya_ID = df.getValueAt(i, 6).toString();
                            Ümumi_Məbləğ = df.getValueAt(i, 7).toString();
                            Tarix = df.getValueAt(i, 8).toString();

                            String query = "insert into satilan_mallar( id, Malin_adi, Miqdari, Satis_qiymeti, Movsum_id, Kateqoriya_id, Alt_kateqoriya_id, Umumi_Mebleg, Satis_Tarixi ) values(?,?,?,?,?,?,?,?,?)";

                            pres = con.prepareStatement(query);
                            pres.setString(1, ID);
                            pres.setString(2, Malin_adi);
                            pres.setString(3, Miqdari);
                            pres.setString(4, Qiymeti);
                            pres.setString(5, Movsum_ID);
                            pres.setString(6, Kateqoriya_ID);
                            pres.setString(7, Alt_Kateqoriya_ID);
                            pres.setString(8, Ümumi_Məbləğ);
                            pres.setString(9, Tarix);        
                            pres.execute();
                        }

                        String query = "insert into satilan_mallar( id, Malin_adi, Miqdari, Umumi_Mebleg, Satis_Tarixi, Qaytarilan_Mehsul_Miqdari, QiemenOdenis, Yeni_goturulen_Mebleg ) values(?,?,?,?,?,?,?,?)";
           
                        pres = con.prepareStatement(query);
                        pres.setString(1, "000");
                        pres.setString(2, "Deyisme Emeliyyati");
                        pres.setString(3, "1");
                        pres.setDouble(4, cemYeniGoturulen);
                        pres.setString(5, date2);
                        pres.setDouble(6, CemGeriQaytarilanMehsullar);
                        pres.setDouble(7, qaliq);
                        pres.setDouble(8, cemYeniGoturulen);
                        pres.execute();
                        
                        
                        
                        // burada qaldiq
                        
                        satis();

                        sebet_2nin_Silinmesi();

                        JOptionPane.showMessageDialog(this, "Satış uğurla başa çatdı");

                        df.setRowCount(0);

                        TextMalinAdi.setText("");
                        TextMalinMiqdari.setText("");
                        txtQiymet.setText("");
                        txtMovsumId.setText("");
                        textKateqoriyaId.setText("");
                        txtAltKateqoriyaID.setText("");
                        txtSatisTarixi.setText("");
                        txtID.setText("");
                        txtUmumi.setText("");

                    }
                } catch (Exception ex) {

                    System.out.println(ex);

                }

            } catch (Exception ex) {

                System.out.println(ex);

            }

        }

    }

    public void sebet_2nin_Silinmesi() {

        try {
            connect();

            String query2 = " delete from sebet_2 ";

            stmt = con.createStatement();
            stmt.execute(query2);

        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void satis() {

        String ID, Miqdari, Ümumi_Məbləğ;

        try {
            connect();
            df = (DefaultTableModel) tableYeniGoturulenMallar.getModel();

            for (int i = 0; i < df.getRowCount(); i++) {

                ID = df.getValueAt(i, 0).toString();
                Miqdari = df.getValueAt(i, 2).toString();
                Ümumi_Məbləğ = df.getValueAt(i, 7).toString();

                String query2 = "update mehsullar set Satis_miqdari = Satis_miqdari + ?,  Satisin_toplam_deyeri = Satisin_toplam_deyeri + ?, Qaliq_say = Miqdari - Satis_miqdari where id = ?";

                pres = con.prepareStatement(query2);

                pres.setString(1, Miqdari);
                pres.setString(2, Ümumi_Məbləğ);
                pres.setString(3, ID);
                pres.executeUpdate();

            }

        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void umumiSatilanMehsulByID() {

        boolean yoxla = txtSatisID.getText().isEmpty();
        int a;
        if (yoxla != false) {

            String mehsulID = txtMehsulID.getText();

            try {

                pres = con.prepareCall("SELECT\n"
                        + "                    s.id,\n"
                        + "                    s.Satis_ID,                 \n"
                        + "                    s.Malin_adi,\n"
                        + "                    s.Miqdari,\n"
                        + "                    s.Movsum_id,\n"
                        + "                    s.Kateqoriya_id,\n"
                        + "                    s.Alt_kateqoriya_id,\n"
                        + "                    s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                        + "                    m.Satis_miqdari,\n"
                        + "                    m.Alis_qiymeti,\n"
                        + "                    m.Satisin_toplam_deyeri,\n"
                        + "                    s.Satis_qiymeti,\n"
                        + "                    m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                        + "                    s.Satis_Tarixi,\n"
                        + "                    ( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir    \n"
                        + "                    FROM\n"
                        + "                    satilan_mallar s\n"
                        + "                    LEFT JOIN mehsullar m ON m.id = s.id\n"
                        + "                    WHERE s.id = " + "'" + mehsulID + "'");

            } catch (SQLException ex) {
                ex.printStackTrace();

            }

        } else {

            String mehsulID = txtMehsulID.getText();
            int satisID = Integer.parseInt(txtSatisID.getText());

            try {

                pres = con.prepareCall("SELECT\n"
                        + "       s.id,\n"
                        + "       s.Satis_ID, \n"
                        + "       s.Malin_adi,\n"
                        + "       s.Miqdari,\n"
                        + "       s.Movsum_id,\n"
                        + "       s.Kateqoriya_id,\n"
                        + "       s.Alt_kateqoriya_id,\n"
                        + "       s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                        + "       m.Satis_miqdari,\n"
                        + "       m.Alis_qiymeti,\n"
                        + "       m.Satisin_toplam_deyeri,\n"
                        + "       s.Satis_qiymeti,\n"
                        + "       m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                        + "       s.Satis_Tarixi,\n"
                        + "       ( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir\n"
                        + "       FROM\n"
                        + "        satilan_mallar s\n"
                        + "                  LEFT JOIN mehsullar m ON m.id = s.id\n"
                        + "                  where s.id = " + "'" + mehsulID + "'" + " and s.Satis_ID = " + "'" + satisID + "'");

            } catch (SQLException ex) {
                ex.printStackTrace();

            }

        }

        try {

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    v2.add(rs.getDouble("Satis_Meblegi_Cem"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));
                    v2.add(rs.getInt("Satis_ID"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {

            System.out.println(ex);
        }

    }

    
    public void tetbiqEt() {

       boolean bugun1 = bugun.isSelected();
        boolean dunen2 = dunen.isSelected();
        boolean umumi2 = umumi.isSelected();

        if (umumi2 != false) {

            umumiSatilanMehsulByID();

        }

        if (bugun1 != false) {

            bugunSatilanMehsulByID();
            
        }
        if (dunen2 != false) {

            dunenSatilanMehsulByID();

        } else {

//            Date tarix = secilenTarix.getDate();
//            String sss = sdf.format(secilenTarix.getDate());

            tarixeGoreSatilanMehsulByID();

        }

        
        

    }


    private void bugunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bugunMouseClicked


    }//GEN-LAST:event_bugunMouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked

    }//GEN-LAST:event_jPanel1MouseClicked

    private void txtBarcodeReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBarcodeReaderActionPerformed

      String barcode = txtBarcodeReader.getText();

        Mehsullar mm2 = mehDao.getMehsulByBarcode(barcode);

        int id = mm2.getId();

        txtMehsulID.setText(Integer.toString(id));

        txtBarcodeReader.setText("");
        tetbiqEt();

    }//GEN-LAST:event_txtBarcodeReaderActionPerformed

    public void axtarisBySatisID() {

        tetbiqEt();

    }


    private void txtBarcodeReaderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBarcodeReaderKeyPressed


    }//GEN-LAST:event_txtBarcodeReaderKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        sebet_2_nin_Silinmesi();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void deyismeProsessi() throws SQLException {

        double qaytarilanCem = Double.parseDouble(txtCemGeriQaytarilanMehsullar.getText());

        df = (DefaultTableModel) SecilmisMallar.getModel();
        int setirSayi = df.getRowCount();
        System.out.println(setirSayi);
        
        if (df.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Səbət boşdur!");
        } else {
            String ID, SATISID, Malin_adi, Miqdari, Qiymeti, Movsum_ID, Kateqoriya_ID, Alt_Kateqoriya_ID, Ümumi_Məbləğ, Tarix;

            try {
                connect();
            } catch (Exception ex) {

                System.out.println(ex);

            }
            df = (DefaultTableModel) SecilmisMallar.getModel();
            for (int i = 0; i < df.getRowCount(); i++) {

                ID = df.getValueAt(i, 0).toString();
                Malin_adi = df.getValueAt(i, 1).toString();
                Miqdari = df.getValueAt(i, 2).toString();
                Qiymeti = df.getValueAt(i, 3).toString();
                Ümumi_Məbləğ = df.getValueAt(i, 4).toString();
                SATISID = df.getValueAt(i, 5).toString();
                Tarix = df.getValueAt(i, 6).toString();

                String query2 = "update mehsullar set Satis_miqdari = Satis_miqdari - ?,  Satisin_toplam_deyeri = Satisin_toplam_deyeri - ?, Qaliq_say = Miqdari - Satis_miqdari where id = ?";

                pres = con.prepareStatement(query2);

                pres.setInt(1, Integer.parseInt(Miqdari));
                pres.setDouble(2, Double.parseDouble(Ümumi_Məbləğ));
                pres.setInt(3, Integer.parseInt(ID));
                pres.executeUpdate();

                String query3 = "delete from satilan_mallar s where s.Satis_ID =? and s.Satis_Tarixi = ?";

                pres = con.prepareStatement(query3);

                pres.setInt(1, Integer.parseInt(SATISID));
                pres.setString(2, (Tarix));
                pres.executeUpdate();

                String query4 = "delete from geri_qaytarilan_mehsullar s where s.id =? and s.Satis_Tarixi = ?";
                pres = con.prepareStatement(query4);

                pres.setInt(1, Integer.parseInt(ID));
                pres.setString(2, (Tarix));
                pres.executeUpdate();

                
                
            }
            load_geriQaytarilanlarSiyahisi();
        }

    }

    public void geriQaytarma() {
     try {
            connect();

            String id, miqdari, umumiMebleg;
            
            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
              int selected = tableQaytarilanMallar.getSelectedRow();

       
                id = df.getValueAt(selected, 0).toString();
                miqdari = df.getValueAt(selected, 2).toString();
                umumiMebleg = df.getValueAt(selected, 7).toString();

            String query2 = "update mehsullar set Satis_miqdari = Satis_miqdari - ?,  Satisin_toplam_deyeri = Satisin_toplam_deyeri - ?, Qaliq_say = Qaliq_say + ? where id = ?";

            pres = con.prepareStatement(query2);

            pres.setString(1, miqdari);
            pres.setString(2, umumiMebleg);
            pres.setString(3, miqdari);
            pres.setString(4, id);
            pres.executeUpdate();

        } catch (Exception ex) {
            System.out.println(ex);
        }

    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        df = (DefaultTableModel) tableQaytarilanMallar.getModel();
        int selected = tableQaytarilanMallar.getSelectedRow();
        if (df.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Səbət boşdur!");
        } else {
            String SATISID, ID, Malin_adi, Miqdari, Qiymeti, Movsum_ID, Kateqoriya_ID, Alt_Kateqoriya_ID, Ümumi_Məbləğ, Tarix;

            try {
                connect();
            } catch (Exception ex) {

                System.out.println(ex);

            }

            for (int i = 0; i < df.getRowCount(); i++) {

                ID = df.getValueAt(selected, 0).toString();
                Malin_adi = df.getValueAt(selected, 1).toString();
                Miqdari = df.getValueAt(selected, 2).toString();
                Qiymeti = df.getValueAt(selected, 3).toString();
                Movsum_ID = df.getValueAt(selected, 4).toString();
                Kateqoriya_ID = df.getValueAt(selected, 5).toString();
                Alt_Kateqoriya_ID = df.getValueAt(selected, 6).toString();
                Ümumi_Məbləğ = df.getValueAt(selected, 7).toString();
                Tarix = df.getValueAt(selected, 8).toString();
                SATISID = df.getValueAt(selected, 9).toString();

                String query = "insert into geri_qaytarilan_mehsullar ( id, Malin_adi, Miqdari, Satis_qiymeti, Movsum_id, Kateqoriya_id, Alt_kateqoriya_id, Umumi_Mebleg, Satis_Tarixi, Satis_ID ) values(?,?,?,?,?,?,?,?,?,?)";

                try {
                    pres = con.prepareStatement(query);

                    pres.setString(1, ID);
                    pres.setString(2, Malin_adi);
                    pres.setString(3, Miqdari);
                    pres.setString(4, Qiymeti);
                    pres.setString(5, Movsum_ID);
                    pres.setString(6, Kateqoriya_ID);
                    pres.setString(7, Alt_Kateqoriya_ID);
                    pres.setString(8, Ümumi_Məbləğ);
                    pres.setString(9, Tarix);
                    pres.setString(10, SATISID);
                    pres.execute();

                    //geriQaytarilanMehsullar();
                    load_geriQaytarilanlarSiyahisi();
                    Qaytarilanlarin_inHesablanmasi();

                } catch (Exception ex) {

                    System.out.println(ex);
                }

            }

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        double cemYeniGoturulen = Double.parseDouble(yeniAlinanCem.getText());
        double CemGeriQaytarilanMehsullar = Double.parseDouble(txtCemGeriQaytarilanMehsullar.getText());

       

        if (cemYeniGoturulen < CemGeriQaytarilanMehsullar) {
            
            try {
            deyismeProsessi();
        } catch (SQLException ex) {

            System.out.println(ex);

        }
        satisEmeliyyati(); 
      
        double qaliq1 = CemGeriQaytarilanMehsullar - cemYeniGoturulen;

            JOptionPane.showMessageDialog(this, "Müştəriyə qaytarılacaq məbləğ " + qaliq1 + " -manat təşkil edir");

        }
        
        
        
        if (cemYeniGoturulen > CemGeriQaytarilanMehsullar) {

              try {
            deyismeProsessi();
        } catch (SQLException ex) {

            System.out.println(ex);

        }
            
          satisEmeliyyati();   
            
            
            double qaliq2 = cemYeniGoturulen - CemGeriQaytarilanMehsullar;
            
            JOptionPane.showMessageDialog(this, "Müştərinin ödəyəcəyi məbləğ " + qaliq2 + " -manat təşkil edir");

        }

        txtCemGeriQaytarilanMehsullar.setText("");
        yeniAlinanCem.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtSatisIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSatisIDKeyReleased

        axtarisBySatisID();


    }//GEN-LAST:event_txtSatisIDKeyReleased

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
      buTarixdeSatilanMehsullar();
    }//GEN-LAST:event_jLabel14MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       
       this.setVisible(false);
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void umumiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_umumiMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_umumiMouseClicked

    private void umumiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_umumiActionPerformed
       
         umumiSatilanMehsullar();
    }//GEN-LAST:event_umumiActionPerformed

    private void btnSilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSilActionPerformed
        
        geriQaytarilanMehsullarinSilinmesi();
        geriQaytarilanlarinHesablanmasi();
    }//GEN-LAST:event_btnSilActionPerformed

    private void btnGeriQaytarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeriQaytarActionPerformed
       String id, Malin_adi, Miqdari, Qiymeti, Movsum_ID, Kateqoriya_ID, Alt_Kateqoriya_ID, Ümumi_Məbləğ, tarix, satisID;
         try {
             
             
              df = (DefaultTableModel) tableQaytarilanMallar.getModel();
              int selected = tableQaytarilanMallar.getSelectedRow();

       
                id = df.getValueAt(selected, 0).toString();
                tarix = df.getValueAt(selected, 8).toString();
                satisID = df.getValueAt(selected, 9).toString();
                

            

            pres = con.prepareStatement("delete from satilan_mallar s where s.id =? and s.Satis_Tarixi = ? and s.Satis_ID = ?");
            pres.setString(1, id);
            pres.setString(2, tarix);
            pres.setString(3, satisID);
            pres.executeUpdate();

            geriQaytarma();

            JOptionPane.showMessageDialog(this, "Mehsul ugurla silindi!");

        } catch (SQLException ex) {
            System.out.println("Gosterilen mehsul satilan mallar siyahisinda yoxdur!");
        }

    }//GEN-LAST:event_btnGeriQaytarActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      
        

        df = (DefaultTableModel) tableYeniGoturulenMallar.getModel();

        int selected = tableYeniGoturulenMallar.getSelectedRow();

//        double kohneumumi = Double.parseDouble(txtCemMebleg.getText());
//
//        double kohneCem = Double.parseDouble(txtGizlin.getText());
//
//        double yeniCemMebleg = kohneumumi - kohneCem;

        int id = Integer.parseInt(df.getValueAt(selected, 0).toString());
        int id2 = Integer.parseInt(df.getValueAt(selected, 0).toString());

        try {
            pres = con.prepareStatement("delete from sebet_2 where id = ? ");

            pres.setInt(1, id);
            pres.executeUpdate();
            load_Sebet_2();
            

        } catch (SQLException ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            if (TextMalinAdi.getText().isEmpty() || TextMalinMiqdari.getText().isEmpty()
                    || txtQiymet.getText().isEmpty() || txtMovsumId.getText().isEmpty()
                    || textKateqoriyaId.getText().isEmpty() || txtAltKateqoriyaID.getText().isEmpty()
                    || txtSatisTarixi.getText().isEmpty()) {

                JOptionPane.showMessageDialog(this, "Zəhmət olmasa bütün məlumatları doldurun");
            } else {
                // String id = txtID.getText();
                String malinadi = TextMalinAdi.getText();
                String miqdari = TextMalinMiqdari.getText();
                String qiymet = txtQiymet.getText();
                String movsumId = txtMovsumId.getText();
                String kateqoriyaId = textKateqoriyaId.getText();
                String altKateqoriya = txtAltKateqoriyaID.getText();
                double umumiMebleg = Double.parseDouble(txtUmumi.getText());
                String alisTarixi = txtSatisTarixi.getText();
                pres = con.prepareStatement(
                        "insert into sebet_2 (id, Malin_adi, Miqdari, Satis_qiymeti, Movsum_id, Kateqoriya_id, Alt_kateqoriya_id, Umumi_Mebleg, Tarix ) values(?,?,?,?,?,?,?,?,?)");

                
                pres.setInt(1, id);
                pres.setString(2, malinadi);
                pres.setString(3, miqdari);
                pres.setString(4, qiymet);
                pres.setString(5, movsumId);
                pres.setString(6, kateqoriyaId);
                pres.setString(7, altKateqoriya);
                pres.setDouble(8, umumiMebleg);
                pres.setString(9, alisTarixi);
                pres.executeUpdate();
                load_Sebet_2();
                JOptionPane.showMessageDialog(this, "Məhsul məlumatları uğurla yeniləndi");

                TextMalinAdi.setText("");
                TextMalinMiqdari.setText("");
                txtQiymet.setText("");
                txtMovsumId.setText("");
                textKateqoriyaId.setText("");
                txtAltKateqoriyaID.setText("");

                txtID.setText("");

                 
                sebet_2_inHesablanmasi();

            }

        } catch (SQLException ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void tableYeniGoturulenMallarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableYeniGoturulenMallarMouseClicked
       
        df = (DefaultTableModel) tableYeniGoturulenMallar.getModel();

        int selected = tableYeniGoturulenMallar.getSelectedRow();

        int id = Integer.parseInt(df.getValueAt(selected, 0).toString());
        TextMalinAdi.setText(df.getValueAt(selected, 1).toString());
        TextMalinMiqdari.setText(df.getValueAt(selected, 2).toString());
        txtQiymet.setText(df.getValueAt(selected, 3).toString());
        txtMovsumId.setText(df.getValueAt(selected, 4).toString());
        textKateqoriyaId.setText(df.getValueAt(selected, 5).toString());
        txtAltKateqoriyaID.setText(df.getValueAt(selected, 6).toString());
        txtUmumi.setText(df.getValueAt(selected, 7).toString());
        txtSatisTarixi.setText(df.getValueAt(selected, 8).toString());
        txtID.setText(Integer.toString(id));
        
        
    }//GEN-LAST:event_tableYeniGoturulenMallarMouseClicked

    public void connect() throws Exception {

        Class.forName("com.mysql.cj.jdbc.Driver");

        con = DriverManager.getConnection("jdbc:mysql://localhost/mehsullar", "root", "dxdiag92");

    }
    
    public void geriQaytarilanlarinHesablanmasi() {

        DecimalFormat dformater = new DecimalFormat("#.##");

        int a;
        try {
            pres = con.prepareCall("select * from geri_qaytarilan_mehsullar");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) SecilmisMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    Double s = rs.getDouble("Umumi_Mebleg");
                    v2.add(s);
                    v2.add(rs.getInt("Satis_ID"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));

                }
                df.addRow(v2);

            }

            df = (DefaultTableModel) SecilmisMallar.getModel();

            double toplam, cem = 0;

            for (int i = 0; i < df.getRowCount(); i++) {

                toplam = Double.parseDouble(df.getValueAt(i, 5).toString());
                cem += toplam;
                String formattedGelir = dformater.format(cem);
                txtCemGeriQaytarilanMehsullar.setText(formattedGelir);

            }

        } catch (Exception ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    
    public void geriQaytarilanMehsullarinSilinmesi() {

        df = (DefaultTableModel) SecilmisMallar.getModel();

        int selected = SecilmisMallar.getSelectedRow();

        int Satis_ID = Integer.parseInt(df.getValueAt(selected, 5).toString());

        try {
            pres = con.prepareStatement("delete from geri_qaytarilan_mehsullar where Satis_ID = ? ");

            pres.setInt(1, Satis_ID);
            pres.executeUpdate();
            loadGeriQaytarilanMallar();

            df = (DefaultTableModel) SecilmisMallar.getModel();
            if (df.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Səbət boşdur!");
                txtCemGeriQaytarilanMehsullar.setText("");
            } else {

                geriQaytarilanlarinHesablanmasi();

            }

            if (df.getRowCount() != 0) {

                JOptionPane.showMessageDialog(this, "Mehsul silindi");
            } else {

                TextMalinAdi.setText("");
                TextMalinMiqdari.setText("");
                txtQiymet.setText("");
                txtMovsumId.setText("");
                textKateqoriyaId.setText("");
                txtAltKateqoriyaID.setText("");

                txtID.setText("");
                txtUmumi.setText("");

                txtBarodeReader.requestFocus();

            }

        } catch (SQLException ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    
    public void loadGeriQaytarilanMallar() {

        int a;
        try {
            pres = con.prepareCall("select * from geri_qaytarilan_mehsullar");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) SecilmisMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    Double s = rs.getDouble("Umumi_Mebleg");
                    v2.add(s);
                    
                    v2.add(rs.getString("Satis_ID"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    public String dunenkiTarix() {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = new GregorianCalendar();
        String ss = sdf.format(cal.getTime());
        cal.add(Calendar.DAY_OF_MONTH, -1);
        String sss = sdf.format(cal.getTime());

        return sss;

    }

    public void umumiSatilanMehsullar() {

        int a;
        try {

            pres = con.prepareCall("SELECT\n"
                    + "	s.id,\n"
                    + "	s.Satis_ID,\n"
                    + "	s.Malin_adi,\n"
                    + "	s.Miqdari,\n"
                    + "	s.Movsum_id,\n"
                    + "	s.Kateqoriya_id,\n"
                    + "	s.Alt_kateqoriya_id,\n"
                    + "	s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                    + " m.Satis_miqdari, \n"
                    + "	m.Alis_qiymeti,\n"
                    + " m.Satisin_toplam_deyeri, \n"
                    + "	s.Satis_qiymeti,\n"
                    + "	m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                    + "	s.Satis_Tarixi,\n"
                    + "	( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir \n"
                    + "FROM\n"
                    + "	satilan_mallar s\n"
                    + "	LEFT JOIN mehsullar m ON m.id = s.id");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    v2.add(rs.getDouble("Satis_Meblegi_Cem"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));
                    v2.add(rs.getInt("Satis_ID"));

                }
                df.addRow(v2);

            }

        } catch (SQLException ex) {
            ex.printStackTrace();

        }

    }

    
    public void dunenSatilanMehsullar() {

        // txtKassa.removeAll();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = new GregorianCalendar();
        String ss = sdf.format(cal.getTime());
        cal.add(Calendar.DAY_OF_MONTH, -1);

        String sss = sdf.format(cal.getTime());

        //  System.out.println(ss);
        // System.out.println(sss);
        int a;
        try {

            pres = con.prepareCall("SELECT\n"
                    + " s.id,\n"
                    + "	s.Satis_ID,\n"
                    + "	s.Malin_adi,\n"
                    + "	s.Miqdari,\n"
                    + "	s.Movsum_id,\n"
                    + "	s.Kateqoriya_id,\n"
                    + "	s.Alt_kateqoriya_id,\n"
                    + "	s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                    + " m.Satis_miqdari, \n"
                    + "	m.Alis_qiymeti,\n"
                    + " m.Satisin_toplam_deyeri, \n"
                    + "	s.Satis_qiymeti,\n"
                    + "	m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                    + "	s.Satis_Tarixi,\n"
                    + "	( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir \n"
                    + "FROM\n"
                    + "	satilan_mallar s\n"
                    + "	LEFT JOIN mehsullar m ON m.id = s.id \n"
                    + "WHERE Date (s.Satis_Tarixi) = " + "'" + sss + "'");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    v2.add(rs.getDouble("Satis_Meblegi_Cem"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));
                    v2.add(rs.getInt("Satis_ID"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }

    }
    
    public void tarixeGoreSatilanMehsulByID(){
       
        boolean yoxla = txtSatisID.getText().isEmpty(); 
        
         int a;
         
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
         String sss = sdf.format(secilenTarix.getDate());
         
         if (yoxla != false) {

            int mehsulID = Integer.parseInt(txtMehsulID.getText());

            try {
                pres = con.prepareCall("SELECT\n"
                        + "s.id,\n"
                        + "s.Satis_ID,\n"
                        + "s.Malin_adi,\n"
                        + "s.Miqdari,\n"
                        + "s.Movsum_id,\n"
                        + "s.Kateqoriya_id,\n"
                        + "s.Alt_kateqoriya_id,\n"
                        + "s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                        + "m.Satis_miqdari,\n"
                        + "m.Alis_qiymeti,\n"
                        + "m.Satisin_toplam_deyeri,\n"
                        + "s.Satis_qiymeti,\n"
                        + "m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                        + "s.Satis_Tarixi,\n"
                        + "( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir \n"
                        + "FROM\n"
                        + "satilan_mallar s\n"
                        + "LEFT JOIN mehsullar m ON m.id = s.id\n"
                        + "WHERE Date (s.Satis_Tarixi) = " + "'" + sss + "'" + " and s.id = " + "'" + mehsulID + "'");
            } catch (SQLException ex) {

                System.out.println(ex);

            }

        } else {

            String mehsulID = txtMehsulID.getText();
            int satisID = Integer.parseInt(txtSatisID.getText());

            try {
                pres = con.prepareCall("SELECT\n"
                        + "s.id,\n"
                        + "s.Satis_ID,\n"
                        + "s.Malin_adi,\n"
                        + "s.Miqdari,\n"
                        + "s.Movsum_id,\n"
                        + "s.Kateqoriya_id,\n"
                        + "s.Alt_kateqoriya_id,\n"
                        + "s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                        + "m.Satis_miqdari,\n"
                        + "m.Alis_qiymeti,\n"
                        + "m.Satisin_toplam_deyeri,\n"
                        + "s.Satis_qiymeti,\n"
                        + "m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                        + "s.Satis_Tarixi,\n"
                        + "( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir \n"
                        + "FROM\n"
                        + "satilan_mallar s\n"
                        + "LEFT JOIN mehsullar m ON m.id = s.id\n"
                        + "WHERE Date (s.Satis_Tarixi) = " + "'" + sss + "'" + " and s.id = " + "'" + mehsulID + "'" + " and s.Satis_ID = " + "'" + satisID + "'");
            } catch (SQLException ex) {

                System.out.println(ex);

            }

        }
        try {

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    v2.add(rs.getDouble("Satis_Meblegi_Cem"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));
                    v2.add(rs.getInt("Satis_ID"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {

        }
         
         
         
        
    }
    

    public void dunenSatilanMehsulByID() {

        boolean yoxla = txtSatisID.getText().isEmpty();

        int a;

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = new GregorianCalendar();
        String ss = sdf.format(cal.getTime());
        cal.add(Calendar.DAY_OF_MONTH, -1);
        String sss = sdf.format(cal.getTime());

        if (yoxla != false) {

            int mehsulID = Integer.parseInt(txtMehsulID.getText());

            try {
                pres = con.prepareCall("SELECT\n"
                        + "s.id,\n"
                        + "s.Satis_ID,\n"
                        + "s.Malin_adi,\n"
                        + "s.Miqdari,\n"
                        + "s.Movsum_id,\n"
                        + "s.Kateqoriya_id,\n"
                        + "s.Alt_kateqoriya_id,\n"
                        + "s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                        + "m.Satis_miqdari,\n"
                        + "m.Alis_qiymeti,\n"
                        + "m.Satisin_toplam_deyeri,\n"
                        + "s.Satis_qiymeti,\n"
                        + "m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                        + "s.Satis_Tarixi,\n"
                        + "( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir \n"
                        + "FROM\n"
                        + "satilan_mallar s\n"
                        + "LEFT JOIN mehsullar m ON m.id = s.id\n"
                        + "WHERE Date (s.Satis_Tarixi) = " + "'" + sss + "'" + " and s.id = " + "'" + mehsulID + "'");
            } catch (SQLException ex) {

                System.out.println(ex);

            }

        } else {

            String mehsulID = txtMehsulID.getText();
            int satisID = Integer.parseInt(txtSatisID.getText());

            try {
                pres = con.prepareCall("SELECT\n"
                        + "s.id,\n"
                        + "s.Satis_ID,\n"
                        + "s.Malin_adi,\n"
                        + "s.Miqdari,\n"
                        + "s.Movsum_id,\n"
                        + "s.Kateqoriya_id,\n"
                        + "s.Alt_kateqoriya_id,\n"
                        + "s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                        + "m.Satis_miqdari,\n"
                        + "m.Alis_qiymeti,\n"
                        + "m.Satisin_toplam_deyeri,\n"
                        + "s.Satis_qiymeti,\n"
                        + "m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                        + "s.Satis_Tarixi,\n"
                        + "( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir \n"
                        + "FROM\n"
                        + "satilan_mallar s\n"
                        + "LEFT JOIN mehsullar m ON m.id = s.id\n"
                        + "WHERE Date (s.Satis_Tarixi) = " + "'" + sss + "'" + " and s.id = " + "'" + mehsulID + "'" + " and s.Satis_ID = " + "'" + satisID + "'");
            } catch (SQLException ex) {

                System.out.println(ex);

            }

        }
        try {

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    v2.add(rs.getDouble("Satis_Meblegi_Cem"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));
                    v2.add(rs.getInt("Satis_ID"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {

        }

    }

    public void bugunSatilanMehsulByID() {

        boolean yoxla = txtSatisID.getText().isEmpty();
        int a;
        if (yoxla != false) {

            String mehsulID = txtMehsulID.getText();

            try {

                pres = con.prepareCall("SELECT\n"
                        + "                    s.id,\n"
                        + "                    s.Satis_ID,                 \n"
                        + "                    s.Malin_adi,\n"
                        + "                    s.Miqdari,\n"
                        + "                    s.Movsum_id,\n"
                        + "                    s.Kateqoriya_id,\n"
                        + "                    s.Alt_kateqoriya_id,\n"
                        + "                    s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                        + "                    m.Satis_miqdari,\n"
                        + "                    m.Alis_qiymeti,\n"
                        + "                    m.Satisin_toplam_deyeri,\n"
                        + "                    s.Satis_qiymeti,\n"
                        + "                    m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                        + "                    s.Satis_Tarixi,\n"
                        + "                    ( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir    \n"
                        + "                    FROM\n"
                        + "                    satilan_mallar s\n"
                        + "                    LEFT JOIN mehsullar m ON m.id = s.id\n"
                        + "                    WHERE Date (s.Satis_Tarixi) = CURRENT_DATE and s.id = " + "'" + mehsulID + "'");

            } catch (SQLException ex) {
                ex.printStackTrace();

            }

        } else {

            String mehsulID = txtMehsulID.getText();
            int satisID = Integer.parseInt(txtSatisID.getText());

            try {

                pres = con.prepareCall("SELECT\n"
                        + "       s.id,\n"
                        + "       s.Satis_ID, \n"
                        + "       s.Malin_adi,\n"
                        + "       s.Miqdari,\n"
                        + "       s.Movsum_id,\n"
                        + "       s.Kateqoriya_id,\n"
                        + "       s.Alt_kateqoriya_id,\n"
                        + "       s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                        + "       m.Satis_miqdari,\n"
                        + "       m.Alis_qiymeti,\n"
                        + "       m.Satisin_toplam_deyeri,\n"
                        + "       s.Satis_qiymeti,\n"
                        + "       m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                        + "       s.Satis_Tarixi,\n"
                        + "       ( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir\n"
                        + "       FROM\n"
                        + "        satilan_mallar s\n"
                        + "                  LEFT JOIN mehsullar m ON m.id = s.id\n"
                        + "                  WHERE Date (s.Satis_Tarixi) = CURRENT_DATE and s.id = " + "'" + mehsulID + "'" + " and s.Satis_ID = " + "'" + satisID + "'");

            } catch (SQLException ex) {
                ex.printStackTrace();

            }

        }

        try {

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    v2.add(rs.getDouble("Satis_Meblegi_Cem"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));
                    v2.add(rs.getInt("Satis_ID"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {

            System.out.println(ex);
        }

    }

    public void bugunSatilanMehsullar() {

        int a;
        try {

            pres = con.prepareCall("SELECT\n"
                    + "	s.id,\n"
                    + "	s.Satis_ID,\n"
                    + "	s.Malin_adi,\n"
                    + "	s.Miqdari,\n"
                    + "	s.Movsum_id,\n"
                    + "	s.Kateqoriya_id,\n"
                    + "	s.Alt_kateqoriya_id,\n"
                    + "	s.Umumi_Mebleg AS Satis_Meblegi_Cem,\n"
                    + " m.Satis_miqdari, \n"
                    + "	m.Alis_qiymeti,\n"
                    + " m.Satisin_toplam_deyeri, \n"
                    + "	s.Satis_qiymeti,\n"
                    + "	m.Satis_miqdari AS Umumi_Satis_Miqdari,\n"
                    + "	s.Satis_Tarixi,\n"
                    + "	( s.Miqdari * s.Satis_qiymeti - s.Miqdari * m.Alis_qiymeti ) AS Xeyir, (m.Satisin_toplam_deyeri - m.Alis_qiymeti* m.Satis_miqdari) as Umumi_Xeyir \n"
                    + "FROM\n"
                    + "	satilan_mallar s\n"
                    + "	LEFT JOIN mehsullar m ON m.id = s.id \n"
                    + "WHERE Date (s.Satis_Tarixi) = CURRENT_DATE");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    v2.add(rs.getDouble("Satis_Meblegi_Cem"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));
                    v2.add(rs.getInt("Satis_ID"));

                }
                df.addRow(v2);

            }

        } catch (SQLException ex) {
            ex.printStackTrace();

        }

    }

    public void geriQaytarilanMehsullar() {

        int a;
        try {

            pres = con.prepareCall(" Select * from geri_qaytarilan_mehsullar ");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) SecilmisMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getDouble("Umumi_Mebleg"));
                    v2.add(rs.getInt("Satis_ID"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));

                }
                df.addRow(v2);

            }

        } catch (SQLException ex) {
            ex.printStackTrace();

        }

    }

    public void sebetinHesablanmasi() {

        DecimalFormat dformater = new DecimalFormat("#.##");

        int a;
        try {
            pres = con.prepareCall("select * from sebet");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    Double s = rs.getDouble("Umumi_Mebleg");
                    v2.add(s);
                    Date ss = rs.getTimestamp("Tarix");
                    v2.add(s);
                    v2.add(rs.getDouble("Qaliq_borc"));

                }
                df.addRow(v2);

            }

            df = (DefaultTableModel) tableQaytarilanMallar.getModel();

            double toplam, cem = 0;

            for (int i = 0; i < df.getRowCount(); i++) {

                toplam = Double.parseDouble(df.getValueAt(i, 7).toString());
                cem += toplam;
                String formattedGelir = dformater.format(cem);
                jTextField1.setText(formattedGelir);

            }

        } catch (Exception ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void sebet_2_inHesablanmasi() {

        DecimalFormat dformater = new DecimalFormat("#.##");

        int a;
        try {
            pres = con.prepareCall("select * from sebet_2");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableYeniGoturulenMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    Double s = rs.getDouble("Umumi_Mebleg");
                    v2.add(s);
                    v2.add(rs.getTimestamp("Tarix"));

                }
                df.addRow(v2);

            }

            df = (DefaultTableModel) tableYeniGoturulenMallar.getModel();

            double toplam, cem = 0;

            for (int i = 0; i < df.getRowCount(); i++) {

                toplam = Double.parseDouble(df.getValueAt(i, 7).toString());
                cem += toplam;
                String formattedGelir = dformater.format(cem);
                yeniAlinanCem.setText(formattedGelir);

            }

        } catch (Exception ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void Qaytarilanlarin_inHesablanmasi() {

        DecimalFormat dformater = new DecimalFormat("#.##");

        int a;
        try {
            pres = con.prepareCall("select * from geri_qaytarilan_mehsullar");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) SecilmisMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getDouble("Umumi_Mebleg"));
                    v2.add(rs.getInt("Satis_ID"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));

                }
                df.addRow(v2);

            }

            df = (DefaultTableModel) SecilmisMallar.getModel();

            double toplam, cem = 0;

            for (int i = 0; i < df.getRowCount(); i++) {

                toplam = Double.parseDouble(df.getValueAt(i, 4).toString());
                cem += toplam;
                String formattedGelir = dformater.format(cem);
                txtCemGeriQaytarilanMehsullar.setText(formattedGelir);

            }

        } catch (Exception ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void load_Sebet_2() {

        int a;
        try {
            pres = con.prepareCall("select * from sebet_2");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tableYeniGoturulenMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getString("Movsum_id"));
                    v2.add(rs.getString("Kateqoriya_id"));
                    v2.add(rs.getString("Alt_kateqoriya_id"));
                    Double s = rs.getDouble("Umumi_Mebleg");
                    v2.add(s);
                    v2.add(rs.getTimestamp("Tarix"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void load_geriQaytarilanlarSiyahisi() {

        int a;
        try {
            pres = con.prepareCall("select * from geri_qaytarilan_mehsullar");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) SecilmisMallar.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getString("Malin_adi"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Satis_qiymeti"));
                    v2.add(rs.getDouble("Umumi_Mebleg"));
                    v2.add(rs.getInt("Satis_ID"));
                    v2.add(rs.getTimestamp("Satis_Tarixi"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {

            System.out.println(ex);

        }
    }

    public void sebet_2_nin_Silinmesi() {

        df = (DefaultTableModel) tableYeniGoturulenMallar.getModel();

        int selected = tableYeniGoturulenMallar.getSelectedRow();

        int id = Integer.parseInt(df.getValueAt(selected, 0).toString());

        try {
            pres = con.prepareStatement("delete from sebet_2 where id = ? ");

            pres.setInt(1, id);
            pres.executeUpdate();
            load_Sebet_2();

            df = (DefaultTableModel) tableYeniGoturulenMallar.getModel();
            if (df.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Səbət boşdur!");
                yeniAlinanCem.setText("");
            } else {

                sebet_2_inHesablanmasi();

            }

            if (df.getRowCount() != 0) {

                JOptionPane.showMessageDialog(this, "Mehsul silindi");
            } else {

                TextMalinAdi.setText("");
                TextMalinMiqdari.setText("");
                txtQiymet.setText("");
                txtMovsumId.setText("");
                textKateqoriyaId.setText("");
                txtAltKateqoriyaID.setText("");

                txtID.setText("");
                txtUmumi.setText("");

                txtBarodeReader.requestFocus();

            }

        } catch (SQLException ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void evezOlunanMehsullariElaveEtme() throws Exception {

        boolean yoxla = cbNisye.isSelected();

        df = (DefaultTableModel) tableYeniGoturulenMallar.getModel();

        if (df.getRowCount() == 0) {

            JOptionPane.showMessageDialog(this, "Səbət boşdur!");

        } else {

            String ID, Malin_adi, Miqdari, Qiymeti, Movsum_ID, Kateqoriya_ID, Alt_Kateqoriya_ID, Ümumi_Məbləğ, Tarix;

            connect();

            if (yoxla != false) {

                BorcYazmaq borcSiyahisi = new BorcYazmaq();
                borcSiyahisi.setVisible(true);

            } else {

                for (int i = 0; i < df.getRowCount(); i++) {

                    ID = df.getValueAt(i, 0).toString();
                    Malin_adi = df.getValueAt(i, 1).toString();
                    Miqdari = df.getValueAt(i, 2).toString();
                    Qiymeti = df.getValueAt(i, 3).toString();
                    Movsum_ID = df.getValueAt(i, 4).toString();
                    Kateqoriya_ID = df.getValueAt(i, 5).toString();
                    Alt_Kateqoriya_ID = df.getValueAt(i, 6).toString();
                    Ümumi_Məbləğ = df.getValueAt(i, 7).toString();
                    Tarix = df.getValueAt(i, 8).toString();

                    String query = "insert into satilan_mallar( id, Malin_adi, Miqdari, Satis_qiymeti, Movsum_id, Kateqoriya_id, Alt_kateqoriya_id, Umumi_Mebleg, Satis_Tarixi) values(?,?,?,?,?,?,?,?,?)";

                    pres = con.prepareStatement(query);
                    pres.setString(1, ID);
                    pres.setString(2, Malin_adi);
                    pres.setString(3, Miqdari);
                    pres.setString(4, Qiymeti);
                    pres.setString(5, Movsum_ID);
                    pres.setString(6, Kateqoriya_ID);
                    pres.setString(7, Alt_Kateqoriya_ID);
                    pres.setString(8, Ümumi_Məbləğ);
                    pres.setString(9, Tarix);
                    pres.execute();

                }
                satis();
                sebet_2_nin_Silinmesi();

                JOptionPane.showMessageDialog(this, "Satış uğurla başa çatdı");

                df.setRowCount(0);

                TextMalinAdi.setText("");
                TextMalinMiqdari.setText("");
                txtQiymet.setText("");
                txtMovsumId.setText("");
                textKateqoriyaId.setText("");
                txtAltKateqoriyaID.setText("");
                txtSatisTarixi.setText("");
                txtID.setText("");
                txtUmumi.setText("");
                yeniAlinanCem.setText("");

                txtBarodeReader.requestFocus();

            }

        }

    }

    public void geriQaytarmaa() {

        try {
            connect();

            df = (DefaultTableModel) tableQaytarilanMallar.getModel();
            for (int i = 0; i < df.getRowCount(); i++) {

                String id = (df.getValueAt(i, 0).toString());
                int miqdari = Integer.parseInt(df.getValueAt(i, 2).toString());
                int umumiMebleg = Integer.parseInt(df.getValueAt(i, 7).toString());

                String query2 = "update mehsullar set Satis_miqdari = Satis_miqdari - ?,  Satisin_toplam_deyeri = Satisin_toplam_deyeri - ?, Qaliq_say = Miqdari - Satis_miqdari where id = ?";

                pres = con.prepareStatement(query2);

                pres.setInt(1, miqdari);
                pres.setDouble(2, umumiMebleg);
                pres.setString(3, id);
                pres.executeUpdate();

            }

        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void satilanMehsullarSiyahisindanSilinme() {
        int say = 0;
        Integer satisID = null;
        String tarix = null;
        try {

            //String tarix = txtSatisTarixi.getText();
            double id = Double.parseDouble(txtID.getText());

            df = (DefaultTableModel) tableQaytarilanMallar.getModel();

            for (int i = 0; i < df.getRowCount(); i++) {

                satisID = Integer.parseInt(df.getValueAt(i, 9).toString());
                tarix = (df.getValueAt(i, 8).toString());

                pres = con.prepareStatement("update satilan_mallar s set s.Umumi_Mebleg = ?, s.Malin_adi = ? + s.Malin_adi where s.Satis_ID = ? and s.Satis_Tarixi =?");
                pres.setDouble(1, say);
                pres.setString(2, "Dəyişdirildi");
                pres.setInt(3, satisID);
                pres.setString(4, tarix);
                pres.executeUpdate();

                geriQaytarma();

            }

            JOptionPane.showMessageDialog(this, "Mehsul ugurla dəyişdirildi!");

        } catch (SQLException ex) {
            System.out.println("Gosterilen mehsul satilan mallar siyahisinda yoxdur!");
        }

    }

    public void tableBorclar() throws SQLException {

        int a;

        String query222 = "SELECT * from sebet ";
        stmt = con.createStatement();
        stmt.execute(query222);
        ResultSet rs = stmt.getResultSet();
        ResultSetMetaData rd = rs.getMetaData();
        a = rd.getColumnCount();
        df = (DefaultTableModel) tableQaytarilanMallar.getModel();
        df.setRowCount(0);

        while (rs.next()) {

            Vector v2 = new Vector();
            for (int i = 0; i < a; i++) {
                v2.add(rs.getInt("id"));
                v2.add(rs.getString("Malin_adi"));
                v2.add(rs.getInt("Miqdari"));
                v2.add(rs.getDouble("Satis_qiymeti"));
                v2.add(rs.getString("Movsum_id"));
                v2.add(rs.getString("Kateqoriya_id"));
                v2.add(rs.getString("Alt_kateqoriya_id"));
                v2.add(rs.getDouble("Umumi_Mebleg"));

                Date s = rs.getTimestamp("Tarix");
                v2.add(s);
                v2.add(rs.getDouble("Qaliq_borc"));
            }
            df.addRow(v2);
        }

    }

    public void sebet_2_ye_AddProsessi() {

        //String barcode = TextMalinAdi.getText();
        String barcode2 = txtBarodeReader.getText();
        Mehsullar mm2 = mehDao.getMehsulByBarcode(barcode2);
        int id = mm2.getId();
        String name = mm2.getName();
        double priveOfSell = mm2.getPriceOfSell();
        String seasonId = mm2.getSeasonId();
        String cattegoryId = mm2.getCategoryId();
        String subcattegoryId = mm2.getSubCategoryId();
        String tarix = txtSatisTarixi.getText();

        try {
            pres = con.prepareStatement("insert into sebet_2 ( id, Malin_adi, Miqdari, Satis_qiymeti, Movsum_id, Kateqoriya_id, Alt_kateqoriya_id, Umumi_Mebleg, Tarix ) values(?,?,?,?,?,?,?,?,?)");

            pres.setInt(1, id);
            pres.setString(2, name);
            pres.setInt(3, 1);
            pres.setDouble(4, priveOfSell);
            pres.setString(5, seasonId);
            pres.setString(6, cattegoryId);
            pres.setString(7, subcattegoryId);
            pres.setDouble(8, priveOfSell * 1);
            pres.setString(9, tarix);
            pres.executeUpdate();

        } catch (SQLException ex) {

            System.out.println(ex);

        }
        TextMalinAdi.setText(name);
        TextMalinMiqdari.setText(Integer.toString(1));
        txtQiymet.setText(Double.toString(priveOfSell));
        txtMovsumId.setText(seasonId);
        textKateqoriyaId.setText(cattegoryId);
        txtAltKateqoriyaID.setText(subcattegoryId);
        txtID.setText(Integer.toString(id));
        txtUmumi.setText(Double.toString(priveOfSell));

        load_Sebet_2();
        sebet_2_inHesablanmasi();

        txtBarodeReader.setText("");
        txtBarodeReader.requestFocus();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MehsulDeyisdirilmesi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MehsulDeyisdirilmesi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MehsulDeyisdirilmesi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MehsulDeyisdirilmesi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MehsulDeyisdirilmesi().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(MehsulDeyisdirilmesi.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(MehsulDeyisdirilmesi.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable SecilmisMallar;
    private javax.swing.JTextField TextMalinAdi;
    private javax.swing.JTextField TextMalinMiqdari;
    private javax.swing.JButton btnGeriQaytar;
    private javax.swing.JButton btnSil;
    private javax.swing.JRadioButton bugun;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbNagd;
    private javax.swing.JCheckBox cbNisye;
    private javax.swing.JRadioButton dunen;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLMalinQiymeti;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField jTextField1;
    private com.toedter.calendar.JDateChooser secilenTarix;
    private javax.swing.JTable tableQaytarilanMallar;
    private javax.swing.JTable tableYeniGoturulenMallar;
    private javax.swing.JTextField textKateqoriyaId;
    private javax.swing.JTextField txtAltKateqoriyaID;
    private javax.swing.JTextField txtBarcodeReader;
    private javax.swing.JTextField txtBarodeReader;
    private javax.swing.JTextField txtCemGeriQaytarilanMehsullar;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtMehsulID;
    private javax.swing.JTextField txtMovsumId;
    private javax.swing.JTextField txtQiymet;
    private javax.swing.JTextField txtSatisID;
    private javax.swing.JTextField txtSatisTarixi;
    private javax.swing.JTextField txtUmumi;
    private javax.swing.JRadioButton umumi;
    private javax.swing.JTextField yeniAlinanCem;
    // End of variables declaration//GEN-END:variables
}
