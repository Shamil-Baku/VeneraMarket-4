/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.qarisiqmallar.veneramarket;

import static com.mycompany.qarisiqmallar.veneramarket.DebtsInDetail.clientName2;
import static com.mycompany.qarisiqmallar.veneramarket.DebtsInDetail.txtClientName;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

/**
 *
 * @author samil
 */
public class BorclarlaEmeliyyat extends javax.swing.JFrame implements WindowListener {

    Date date = new Date();
    Calendar calendar;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd ");
    String date2 = sdf.format(date);

    public BorclarlaEmeliyyat() {

        try {
            initComponents();
            connect();
            panelTest.setVisible(false);
        } catch (Exception ex) {
            System.out.println(ex);

        }
        txtOdenisTarixi.setText(date2);
        txtAxtaris.requestFocus();

        setTime();
        filterAllClients();
        getCommonDebts();
        clearBarcodeText();

        //addAllDebtsToTheTable();
    }

    Connection con;
    PreparedStatement pres;
    Statement stmt;
    ResultSet rs;
    DefaultTableModel df;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        changeNameOfClient = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtBorcAlaninAdi = new javax.swing.JTextField();
        txtMehsul = new javax.swing.JTextField();
        txtID = new javax.swing.JTextField();
        txtMiqdari = new javax.swing.JTextField();
        txtUmumiMebleg = new javax.swing.JTextField();
        txtQismenOdenis = new javax.swing.JTextField();
        txtQaliqBorc = new javax.swing.JTextField();
        txtQiymeti = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBorcSiyahisi = new javax.swing.JTable();
        txtUmumiBorc = new javax.swing.JTextField();
        txtBorc = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtAxtaris = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtOdenis = new javax.swing.JTextField();
        txtOdenisTarixi = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtBorcID = new javax.swing.JTextField();
        chcBoxHamisi = new javax.swing.JCheckBox();
        panelTest = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listNameOfClients = new javax.swing.JList<>();
        checkBoxShowAllDebts = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        optionForCashier = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        Bagla = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        changeNameOfClient.setText("jMenuItem1");
        changeNameOfClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNameOfClientActionPerformed(evt);
            }
        });
        jPopupMenu1.add(changeNameOfClient);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 51, 204));

        jPanel1.setBackground(new java.awt.Color(102, 0, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Borca aldigi mehsulun adi");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Borc alanin adi");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("ID");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Miqdari");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Umumi meleg");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Qiymeti");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Qismen odenis");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Qaliq borc");

        txtBorcAlaninAdi.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtMehsul.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtID.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtMiqdari.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtUmumiMebleg.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtQismenOdenis.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtQismenOdenis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQismenOdenisActionPerformed(evt);
            }
        });
        txtQismenOdenis.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQismenOdenisKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQismenOdenisKeyTyped(evt);
            }
        });

        txtQaliqBorc.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtQiymeti.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        tblBorcSiyahisi = new JTable()

        {
            public boolean isCellEditable(int row, int column)

            {
                for(int i =0; i< tblBorcSiyahisi.getRowCount(); i++)
                {
                    if(row == i)
                    {
                        return false;
                    }
                }
                return false;
            }
        };
        tblBorcSiyahisi.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        tblBorcSiyahisi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Say", "Borc alanin adi", "Mehsul", "ID", "BorcID", "Miqdari", "Qiymeti", "Umumi mebleg", "Qismen odenis", "Qaliq borc", "Borc alma tarixi", "Borc odeme tarixi"
            }
        ));
        tblBorcSiyahisi.setGridColor(java.awt.SystemColor.activeCaption);
        tblBorcSiyahisi.setRowHeight(28);
        tblBorcSiyahisi.setShowGrid(true);
        tblBorcSiyahisi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBorcSiyahisiMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblBorcSiyahisiMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblBorcSiyahisi);
        if (tblBorcSiyahisi.getColumnModel().getColumnCount() > 0) {
            tblBorcSiyahisi.getColumnModel().getColumn(1).setMinWidth(100);
            tblBorcSiyahisi.getColumnModel().getColumn(1).setPreferredWidth(140);
            tblBorcSiyahisi.getColumnModel().getColumn(1).setMaxWidth(500);
            tblBorcSiyahisi.getColumnModel().getColumn(2).setPreferredWidth(140);
            tblBorcSiyahisi.getColumnModel().getColumn(3).setMinWidth(2);
            tblBorcSiyahisi.getColumnModel().getColumn(3).setPreferredWidth(2);
            tblBorcSiyahisi.getColumnModel().getColumn(3).setMaxWidth(100);
            tblBorcSiyahisi.getColumnModel().getColumn(4).setMinWidth(2);
            tblBorcSiyahisi.getColumnModel().getColumn(4).setPreferredWidth(2);
            tblBorcSiyahisi.getColumnModel().getColumn(4).setMaxWidth(100);
            tblBorcSiyahisi.getColumnModel().getColumn(5).setMinWidth(30);
            tblBorcSiyahisi.getColumnModel().getColumn(5).setPreferredWidth(50);
            tblBorcSiyahisi.getColumnModel().getColumn(5).setMaxWidth(100);
            tblBorcSiyahisi.getColumnModel().getColumn(6).setMinWidth(30);
            tblBorcSiyahisi.getColumnModel().getColumn(6).setPreferredWidth(60);
            tblBorcSiyahisi.getColumnModel().getColumn(6).setMaxWidth(100);
            tblBorcSiyahisi.getColumnModel().getColumn(9).setMinWidth(30);
            tblBorcSiyahisi.getColumnModel().getColumn(9).setPreferredWidth(70);
            tblBorcSiyahisi.getColumnModel().getColumn(9).setMaxWidth(100);
            tblBorcSiyahisi.getColumnModel().getColumn(10).setPreferredWidth(250);
            tblBorcSiyahisi.getColumnModel().getColumn(10).setMaxWidth(300);
            tblBorcSiyahisi.getColumnModel().getColumn(11).setPreferredWidth(250);
            tblBorcSiyahisi.getColumnModel().getColumn(11).setMaxWidth(300);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addContainerGap())
        );

        txtUmumiBorc.setFont(new java.awt.Font("Segoe UI", 1, 40)); // NOI18N
        txtUmumiBorc.setForeground(new java.awt.Color(255, 0, 0));
        txtUmumiBorc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtUmumiBorc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUmumiBorcActionPerformed(evt);
            }
        });

        txtBorc.setFont(new java.awt.Font("Segoe UI", 1, 40)); // NOI18N
        txtBorc.setForeground(new java.awt.Color(255, 0, 0));
        txtBorc.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Axtar..");

        txtAxtaris.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtAxtaris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAxtarisActionPerformed(evt);
            }
        });
        txtAxtaris.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAxtarisKeyReleased(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Ödəniş");

        txtOdenis.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtOdenis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOdenisActionPerformed(evt);
            }
        });
        txtOdenis.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOdenisKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtOdenisKeyReleased(evt);
            }
        });

        txtOdenisTarixi.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtOdenisTarixi.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Tarix");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("BorcID");

        txtBorcID.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        chcBoxHamisi.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        chcBoxHamisi.setForeground(new java.awt.Color(255, 255, 255));
        chcBoxHamisi.setText("Hamısı");
        chcBoxHamisi.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chcBoxHamisi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chcBoxHamisiMouseClicked(evt);
            }
        });

        panelTest.setBackground(new java.awt.Color(102, 0, 102));

        listNameOfClients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listNameOfClientsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listNameOfClients);

        javax.swing.GroupLayout panelTestLayout = new javax.swing.GroupLayout(panelTest);
        panelTest.setLayout(panelTestLayout);
        panelTestLayout.setHorizontalGroup(
            panelTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTestLayout.createSequentialGroup()
                .addGap(0, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelTestLayout.setVerticalGroup(
            panelTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
        );

        checkBoxShowAllDebts.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxShowAllDebts.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxShowAllDebts.setText("Borclari goster");
        checkBoxShowAllDebts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxShowAllDebtsActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Kassir adı :");

        optionForCashier.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Secim edin..", "Eliyeva Zülfiyye", "Eliyeva Hecer", "Eliyev Şamil", "Eliyev Ramil" }));
        optionForCashier.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                optionForCashierMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtBorcAlaninAdi, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMehsul, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(optionForCashier, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(txtAxtaris, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panelTest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtBorc, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtUmumiBorc, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(checkBoxShowAllDebts, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtOdenisTarixi, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(20, 20, 20)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(30, 30, 30)
                                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(30, 30, 30)
                                            .addComponent(txtBorcID, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)))
                                            .addGap(30, 30, 30)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtQismenOdenis, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(txtMiqdari)
                                                .addComponent(txtQaliqBorc)
                                                .addComponent(txtUmumiMebleg)
                                                .addComponent(txtQiymeti)
                                                .addComponent(txtOdenis, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(chcBoxHamisi, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUmumiBorc, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBorc, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxShowAllDebts))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtBorcAlaninAdi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4))
                                    .addComponent(txtMehsul, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtAxtaris, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(optionForCashier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBorcID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMiqdari, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQiymeti, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUmumiMebleg, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQismenOdenis, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQaliqBorc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtOdenis, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(chcBoxHamisi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtOdenisTarixi, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        txtUmumiBorc.getAccessibleContext().setAccessibleName("");
        txtUmumiBorc.getAccessibleContext().setAccessibleDescription("");

        jButton2.setBackground(new java.awt.Color(51, 255, 51));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Ödeniş et");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Bagla.setBackground(new java.awt.Color(0, 0, 255));
        Bagla.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Bagla.setForeground(new java.awt.Color(255, 255, 255));
        Bagla.setText("Bagla");
        Bagla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BaglaMouseClicked(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Geri Qaytar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 153, 153));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Təmizlə");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Ödeniş çekini çap et");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Borc qebzini çap et");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(Bagla)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(16, 16, 16))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Bagla, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtQismenOdenisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQismenOdenisActionPerformed

//        double umumiBorc = Double.parseDouble(txtUmumiMebleg.getText());
//        double borcdanOdenis = Double.parseDouble(txtQismenOdenis.getText());
//        double netice = umumiBorc - borcdanOdenis;
//
//        txtQaliqBorc.setText(Double.toString(netice));
//
//        txtBorc.setText("");
//        txtBorc.setText(Double.toString(netice));
//
//        boolean yoxla = txtUmumiBorc.getText().isEmpty();
//
//        if (yoxla != true) {
//
//            double txtumumiBorc = Double.parseDouble(txtUmumiBorc.getText());
//            double netice2 = txtumumiBorc + netice;
//            txtUmumiBorc.setText(Double.toString(netice2));
//
//        } else {
//
//            txtUmumiBorc.setText(Double.toString(netice));
//        }
    }//GEN-LAST:event_txtQismenOdenisActionPerformed

    public void clearBarcodeText() {

        // Main.txtBarcode_reader.setText("");
    }

    public void borcGostericileri() {

        DecimalFormat dformater = new DecimalFormat("#.##");

        df = (DefaultTableModel) tblBorcSiyahisi.getModel();
        double QaliqBorc;
        for (int i = 0; i < df.getRowCount(); i++) {

            QaliqBorc = Double.parseDouble(df.getValueAt(i, 8).toString());
            String formattedQaliqBorc = dformater.format(QaliqBorc);

            boolean yoxla = txtUmumiBorc.getText().isEmpty();

            if (yoxla != true) {
                double Kohbeborc = Double.parseDouble(txtUmumiBorc.getText());

                double result = QaliqBorc + Kohbeborc;
                double roundedResult = Math.round(result * 100.000) / 100.000;

                txtUmumiBorc.setText(Double.toString(roundedResult));

            } else {

                txtUmumiBorc.setText(formattedQaliqBorc);

            }

        }
    }

    public void calculateAllCommonDebts() {

        df = (DefaultTableModel) tblBorcSiyahisi.getModel();
        double totalDebt;
        double allTotalDebt = 0;
        for (int i = 0; i < df.getRowCount(); i++) {
            totalDebt = Double.parseDouble(df.getValueAt(i, 5).toString());
            allTotalDebt += totalDebt;
        }
        double roundedDebt = Math.round(allTotalDebt * 100.000) / 100.000;
        txtUmumiBorc.setText(Double.toString(roundedDebt));

    }

    public void loadAxtarisaGore() {

        String s = txtBorcAlaninAdi.getText();

        int a;
        try {
            pres = con.prepareCall("select * from borclar_siyahisi b where b.Borc_alanin_adi like " + "'" + "%" + s + "%" + "'");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tblBorcSiyahisi.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {

                    v2.add(rs.getString("Borc_alanin_adi"));
                    v2.add(rs.getString("Borca_goturduyu_mehsul"));
                    v2.add(rs.getInt("Mehsul_ID"));
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getDouble("Miqdari"));
                    v2.add(rs.getDouble("Qiymeti"));
                    v2.add(rs.getDouble("Umumi_mebleg"));
                    v2.add(rs.getDouble("Qismen_odenis"));
                    v2.add(rs.getDouble("Qaliq_borc"));
                    v2.add(rs.getString("Borc_alma_tarixi"));
                    v2.add(rs.getString("Borc_odeme_tarixi"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }

        txtUmumiBorc.setText("");
        borcGostericileri();

    }

    public void satis() {

        String ID, Miqdari, Ümumi_Məbləğ;

        try {
            connect();
            df = (DefaultTableModel) tblBorcSiyahisi.getModel();
            Double qaliqBorc;

            for (int i = 0; i < df.getRowCount(); i++) {

                qaliqBorc = Double.parseDouble(df.getValueAt(i, 8).toString());

                if (qaliqBorc == 0.00) {

                    ID = df.getValueAt(i, 2).toString();
                    Miqdari = df.getValueAt(i, 4).toString();
                    Ümumi_Məbləğ = df.getValueAt(i, 6).toString();

                    String query2 = "update mehsullar set Satisin_toplam_deyeri = Satisin_toplam_deyeri + ? where id = ?";

                    pres = con.prepareStatement(query2);

                    // pres.setString(1, Miqdari);
                    pres.setString(1, Ümumi_Məbləğ);
                    pres.setString(2, ID);
                    pres.executeUpdate();
                    borcunSilinmesi2();

                }
                if (!txtOdenis.getText().isEmpty()) {
                    int mehsulID2, borcID2;

                    int mehsulID = Integer.parseInt(txtID.getText());
                    int borcID = Integer.parseInt(txtBorcID.getText());

                    df = (DefaultTableModel) tblBorcSiyahisi.getModel();

                    mehsulID2 = Integer.parseInt(df.getValueAt(i, 2).toString());
                    borcID2 = Integer.parseInt(df.getValueAt(i, 3).toString());

                    if (mehsulID2 == mehsulID && borcID2 == borcID) {

                        double QaliqBorc2, qiymeti, umumimebleg, qismenOdenis, Miqdari2;
                        String borcAlaninAdi, Mehsul, SatisTarixi;
                        int MehsulID2;

                        int selected = tblBorcSiyahisi.getSelectedRow();
                        System.out.println(selected);

                        //for (int ii = 0; ii < (df.getRowCount()-( df.getRowCount()-1)); ii++) {
                        borcAlaninAdi = df.getValueAt(i, 0).toString();
                        Mehsul = df.getValueAt(i, 1).toString();
                        MehsulID2 = Integer.parseInt(df.getValueAt(i, 2).toString());
                        Miqdari2 = Double.parseDouble(df.getValueAt(i, 4).toString());
                        qiymeti = Double.parseDouble(df.getValueAt(i, 5).toString());
                        umumimebleg = Double.parseDouble(df.getValueAt(i, 6).toString());
                        qismenOdenis = Double.parseDouble(df.getValueAt(i, 7).toString());
                        SatisTarixi = df.getValueAt(i, 10).toString();

                        int say = 1;
                        Statement stmt = con.createStatement();
                        stmt.execute("select * from satilan_mallar");
                        ResultSet rs = stmt.getResultSet();
                        while (rs.next()) {
                            say++;
                        }

                        String query = "insert into satilan_mallar ( Satis_ID, id, Malin_adi, Miqdari, Satis_qiymeti, Umumi_Mebleg, Satis_Tarixi, Borc_Alanin_Adi,OdenisinNovu, QiemenOdenis, Borcdan_Gelen) values(?,?,?,?,?,?,?,?,?,?,?)";

                        pres = con.prepareStatement(query);
                        pres.setInt(1, say);
                        pres.setInt(2, 0);
                        pres.setString(3, "Borcdan-" + Mehsul);
                        pres.setDouble(4, Miqdari2);
                        pres.setDouble(5, qiymeti);
                        pres.setDouble(6, umumimebleg);
                        pres.setString(7, time2);
                        pres.setString(8, borcAlaninAdi);
                        pres.setString(9, "Borcdan gələn");
                        pres.setDouble(10, qismenOdenis);
                        pres.setDouble(11, umumimebleg);

                        pres.execute();

                        JOptionPane.showMessageDialog(this, "Borc ugurla yenilendi!");

                    }

                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

    }

    public void satis2() {

        String ID, Miqdari, Ümumi_Məbləğ;

        try {
            df = (DefaultTableModel) tblBorcSiyahisi.getModel();
            Double qaliqBorc;

            for (int i = 0; i < df.getRowCount(); i++) {

                qaliqBorc = Double.parseDouble(df.getValueAt(i, 8).toString());

                if (qaliqBorc == 0.00) {

                    ID = df.getValueAt(i, 2).toString();
                    Miqdari = df.getValueAt(i, 4).toString();
                    Ümumi_Məbləğ = df.getValueAt(i, 6).toString();

                    String query2 = "update mehsullar set Satisin_toplam_deyeri = Satisin_toplam_deyeri + ? where id = ?";

                    pres = con.prepareStatement(query2);

                    // pres.setString(1, Miqdari);
                    pres.setString(1, Ümumi_Məbləğ);
                    pres.setString(2, ID);
                    pres.executeUpdate();

                }

            }
            borcunSilinmesi();
        } catch (Exception ex) {

        }
    }

    public void borcunSilinmesi2() {

        double QaliqBorc2, qiymeti, umumimebleg, qismenOdenis, Miqdari;
        String borcAlaninAdi, Mehsul, SatisTarixi;
        int MehsulID, BorcID;

        df = (DefaultTableModel) tblBorcSiyahisi.getModel();
        double QaliqBorc;

        //int selected = tblBorcSiyahisi.getSelectedRow();
        for (int i = 0; i < df.getRowCount(); i++) {

            QaliqBorc = Double.parseDouble(df.getValueAt(i, 8).toString());

            if (QaliqBorc == 0.00) {

                df = (DefaultTableModel) tblBorcSiyahisi.getModel();

                borcAlaninAdi = df.getValueAt(i, 0).toString();
                Mehsul = df.getValueAt(i, 1).toString();
                MehsulID = Integer.parseInt(df.getValueAt(i, 2).toString());
                Miqdari = Double.parseDouble(df.getValueAt(i, 4).toString());
                qiymeti = Double.parseDouble(df.getValueAt(i, 5).toString());
                umumimebleg = Double.parseDouble(df.getValueAt(i, 6).toString());
                qismenOdenis = Double.parseDouble(df.getValueAt(i, 7).toString());
                SatisTarixi = df.getValueAt(i, 10).toString();

                try {

                    int say = 1;
                    Statement stmt = con.createStatement();
                    stmt.execute("select * from satilan_mallar");
                    ResultSet rs = stmt.getResultSet();
                    while (rs.next()) {
                        say++;
                    }

                    String query = "insert into satilan_mallar (Satis_ID, id, Malin_adi, Miqdari, Satis_qiymeti,  Umumi_Mebleg, Satis_Tarixi, Borcdan_Gelen, QiemenOdenis, Borc_Alanin_Adi) values(?,?,?,?,?,?,?,?,?,?)";

                    pres = con.prepareStatement(query);

                    //pres.setString(1, BorcAlaninAdi);
                    pres.setInt(1, say);
                    pres.setInt(2, MehsulID);
                    pres.setString(3, "Borcdan-" + Mehsul);
                    pres.setDouble(4, Miqdari);
                    pres.setDouble(5, qiymeti);
                    pres.setDouble(6, umumimebleg);
                    pres.setString(7, SatisTarixi);
                    pres.setDouble(8, umumimebleg);
                    pres.setDouble(9, qismenOdenis);
                    pres.setString(10, borcAlaninAdi);
                    pres.execute();

                } catch (SQLException ex) {

                }

            }

        }
        df = (DefaultTableModel) tblBorcSiyahisi.getModel();

        for (int i2 = 0; i2 < df.getRowCount(); i2++) {

            MehsulID = Integer.parseInt(df.getValueAt(i2, 2).toString());
            BorcID = Integer.parseInt(df.getValueAt(i2, 3).toString());
            QaliqBorc = Double.parseDouble(df.getValueAt(i2, 8).toString());

            try {

                if (QaliqBorc == 0.00) {

                    String querySilinme = "delete from borclar_siyahisi where id = " + BorcID;
                    stmt = con.createStatement();
                    stmt.execute(querySilinme);

                    txtUmumiBorc.setText("");
                    txtBorc.setText("");
                    txtID.setText("");
                    txtBorcID.setText("");
                    txtMiqdari.setText("");
                    txtQiymeti.setText("");
                    txtUmumiMebleg.setText("");
                    txtQismenOdenis.setText("");
                    txtQaliqBorc.setText("");
                    txtOdenis.setText("");
                    txtMehsul.setText("");

                    //loadAxtarisaGore();
                }

            } catch (Exception ex) {

            }

        }

        JOptionPane.showMessageDialog(this, "Borc ugurla silindi!");

    }

    public void borcunSilinmesi() throws SQLException {

        double QaliqBorc2, qiymeti, umumimebleg, qismenOdenis, Miqdari;
        String borcAlaninAdi, Mehsul, SatisTarixi;
        int MehsulID, BorcID;

        df = (DefaultTableModel) tblBorcSiyahisi.getModel();
        double QaliqBorc;

        //int selected = tblBorcSiyahisi.getSelectedRow();
        for (int i = 0; i < df.getRowCount(); i++) {

            QaliqBorc = Double.parseDouble(df.getValueAt(i, 8).toString());

            if (QaliqBorc == 0.00) {

                df = (DefaultTableModel) tblBorcSiyahisi.getModel();

                borcAlaninAdi = df.getValueAt(i, 0).toString();
                Mehsul = df.getValueAt(i, 1).toString();
                MehsulID = Integer.parseInt(df.getValueAt(i, 2).toString());
                Miqdari = Double.parseDouble(df.getValueAt(i, 4).toString());
                qiymeti = Double.parseDouble(df.getValueAt(i, 5).toString());
                umumimebleg = Double.parseDouble(df.getValueAt(i, 6).toString());
                qismenOdenis = Double.parseDouble(df.getValueAt(i, 7).toString());
                SatisTarixi = df.getValueAt(i, 10).toString();

                int say = 1;
                Statement stmt = con.createStatement();
                stmt.execute("select * from satilan_mallar");
                ResultSet rs = stmt.getResultSet();
                while (rs.next()) {
                    say++;
                }

                String query = "insert into satilan_mallar (Satis_ID, id, Malin_adi, Miqdari, Satis_qiymeti,  Umumi_Mebleg, Satis_Tarixi, Borcdan_Gelen, QiemenOdenis, Borc_Alanin_Adi) values(?,?,?,?,?,?,?,?,?,?)";

                pres = con.prepareStatement(query);

                //pres.setString(1, BorcAlaninAdi);
                pres.setInt(1, say);
                pres.setInt(2, MehsulID);
                pres.setString(3, "Borcdan-" + Mehsul);
                pres.setDouble(4, Miqdari);
                pres.setDouble(5, qiymeti);
                pres.setDouble(6, umumimebleg);
                pres.setString(7, SatisTarixi);
                pres.setDouble(8, umumimebleg);
                pres.setDouble(9, qismenOdenis);
                pres.setString(10, borcAlaninAdi);
                pres.execute();
            }
        }
        df = (DefaultTableModel) tblBorcSiyahisi.getModel();

        for (int i2 = 0; i2 < df.getRowCount(); i2++) {

            MehsulID = Integer.parseInt(df.getValueAt(i2, 2).toString());
            BorcID = Integer.parseInt(df.getValueAt(i2, 3).toString());
            QaliqBorc = Double.parseDouble(df.getValueAt(i2, 8).toString());

            if (QaliqBorc == 0.00) {

                String querySilinme = "delete from borclar_siyahisi where id = " + BorcID;
                stmt = con.createStatement();
                stmt.execute(querySilinme);

                txtUmumiBorc.setText("");
                txtBorc.setText("");
                txtID.setText("");
                txtBorcID.setText("");
                txtMiqdari.setText("");
                txtQiymeti.setText("");
                txtUmumiMebleg.setText("");
                txtQismenOdenis.setText("");
                txtQaliqBorc.setText("");
                txtOdenis.setText("");
                txtMehsul.setText("");
                chcBoxHamisi.doClick();
                //loadAxtarisaGore();

            }

        }

        JOptionPane.showMessageDialog(this, "Borc ugurla silindi!");

    }

    public void loadAxtarisaGore2() {

        String s = txtAxtaris.getText();

        int a;
        try {

            pres = con.prepareCall("select * borclar_siyahisi b where b.Borc_alanin_adi like " + "'" + "%" + s + "%" + "'");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tblBorcSiyahisi.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getString("Borc_alanin_adi"));
                    v2.add(rs.getString("Borca_goturduyu_mehsul"));
                    v2.add(rs.getInt("Mehsul_ID"));
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getInt("Miqdari"));
                    v2.add(rs.getDouble("Qiymeti"));
                    v2.add(rs.getDouble("Umumi_mebleg"));
                    v2.add(rs.getDouble("Qismen_odenis"));
                    Double ss = rs.getDouble("Qaliq_borc");
                    v2.add(ss);
                    v2.add(rs.getString("Borc_alma_tarixi"));
                    v2.add(rs.getString("Borc_odeme_tarixi"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void load() {

        int a;
        try {
            pres = con.prepareCall("select * from borclar_siyahisi");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tblBorcSiyahisi.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {
                    v2.add(rs.getString("Borc_alanin_adi"));
                    v2.add(rs.getString("Borca_goturduyu_mehsul"));
                    v2.add(rs.getInt("Mehsul_ID"));
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getDouble("Miqdari"));
                    v2.add(rs.getDouble("Qiymeti"));
                    v2.add(rs.getDouble("Umumi_mebleg"));
                    v2.add(rs.getDouble("Qismen_odenis"));
                    Double s = rs.getDouble("Qaliq_borc");
                    v2.add(s);
                    v2.add(rs.getString("Borc_alma_tarixi"));
                    v2.add(rs.getString("Borc_odeme_tarixi"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public Connection connect() {
        try {

            //Class.forName("com.mysql.jdbc.Driver");
            String url = ("jdbc:mysql://localhost:3306/mehsullar");
            String usercategoryOfProduct = ("root");
            String password = ("dxdiag92");
            con = DriverManager.getConnection(url, usercategoryOfProduct, password);

        } catch (Exception ex) {

        }

        return con;

    }

    public void filterAllClients() {
        String name = null;
        try {

            con = connect();

            pres = con.prepareStatement("truncate table clients");
            pres.executeUpdate();

            pres = con.prepareStatement("select * from borclar_siyahisi");
            ResultSet rsB = pres.executeQuery();

            while (rsB.next()) {

                name = rsB.getString("Borc_alanin_adi");
                pres = con.prepareStatement("select * from clients where NameAndSurename = " + "'" + name + "'");
                ResultSet rsResult = pres.executeQuery();
                if (rsResult.next()) {
                    System.out.println("Bu musteri movcuddur.. Novbetiye kecilir");
                } else {

                    pres = con.prepareStatement("insert into clients (NameAndSurename, PersentageOfSalePrice) values(?,?)");
                    pres.setString(1, name);
                    pres.setDouble(2, 0.0);
                    pres.executeUpdate();

                }

            }

        } catch (Exception ex) {
            ex.printStackTrace();
            try {

            } catch (Exception ex2) {
                ex2.printStackTrace();
            }

        }

    }

    public void getCommonDebts() {

        int id;
        try {
            con = connect();
            pres = con.prepareStatement("truncate table borclar_siyahisi_common");
            pres.executeUpdate();

            pres = con.prepareStatement("select * from clients");
            ResultSet rsClients = pres.executeQuery();
            while (rsClients.next()) {

                String clientName = null;
                int totalProductNumber = 0;
                double allTotalSum = 0;
                double allPartialPayment = 0;
                double allRemainingDebt = 0;

                clientName = rsClients.getString("NameAndSurename");
                id = rsClients.getInt("id");

                pres = con.prepareStatement("insert into borclar_siyahisi_Common (id, Borc_alanin_adi) values(?,?)");
                pres.setInt(1, id);
                pres.setString(2, clientName);
                pres.executeUpdate();

                pres = con.prepareStatement("select * from borclar_siyahisi where Borc_alanin_adi = " + "'" + clientName + "'");
                ResultSet rsCommon = pres.executeQuery();

                while (rsCommon.next()) {
                    int numberOfProduct = rsCommon.getInt("Miqdari");
                    double totalSum = rsCommon.getDouble("Umumi_mebleg");
                    double partialPayment = rsCommon.getDouble("Qismen_odenis");
                    double remainingDebt = rsCommon.getDouble("Qaliq_borc");

                    totalProductNumber += numberOfProduct;
                    allTotalSum += totalSum;
                    allPartialPayment += partialPayment;
                    allRemainingDebt += remainingDebt;

                    if (rsCommon.isLast()) {

                        double roundedAllTotalSum = Math.round(allTotalSum * 100.000) / 100.000;
                        double roundedAllPartialPayment = Math.round(allPartialPayment * 100.000) / 100.000;
                        double roundedAllRemainingDebt = Math.round(allRemainingDebt * 100.000) / 100.000;

                        pres = con.prepareStatement("update borclar_siyahisi_common set umumiMehsulMiqdari=?, Umumi_mebleg=?, Qismen_odenis=?, Qaliq_borc=? where Borc_alanin_adi = " + "'" + clientName + "'");
                        pres.setInt(1, totalProductNumber);
                        pres.setDouble(2, roundedAllTotalSum);
                        pres.setDouble(3, roundedAllPartialPayment);
                        pres.setDouble(4, roundedAllRemainingDebt);
                        pres.executeUpdate();

                    }

                }

            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void txtQismenOdenisKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQismenOdenisKeyReleased

    }//GEN-LAST:event_txtQismenOdenisKeyReleased

    private void txtQismenOdenisKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQismenOdenisKeyTyped

    }//GEN-LAST:event_txtQismenOdenisKeyTyped

    private void tblBorcSiyahisiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBorcSiyahisiMouseClicked

        int a;
        int clickSayi = evt.getClickCount();

        if (clickSayi == 2) {

            boolean yoxla = checkBoxShowAllDebts.isSelected();

            if (yoxla != false) {
                df = (DefaultTableModel) tblBorcSiyahisi.getModel();

                int selected = tblBorcSiyahisi.getSelectedRow();

                String clientName = df.getValueAt(selected, 1).toString();

                DebtsInDetail allProductsInDebt = new DebtsInDetail(this, false);

                DebtsInDetail.clientName2 = clientName;
                DebtsInDetail.txtClientName.setText(clientName);

                getAllProduct();

                allProductsInDebt.setVisible(true);
            }

//            try {
//                con = connect();
//                pres = con.prepareStatement("select * from borclar_siyahisi where Borc_alanin_adi = " + "'" + clientName + "'");
//
//                ResultSet rs = pres.executeQuery();
//
//                ResultSetMetaData rd = rs.getMetaData();
//                a = rd.getColumnCount();
//                df.setRowCount(0);
//
//                while (rs.next()) {
//
//                    Vector v2 = new Vector();
//                    for (int i = 0; i < a; i++) {
//
//                        v2.add("");
//
//                    }
//
//                }
//
//            } catch (Exception ex) {
//
//                ex.printStackTrace();
//
//            }
        } else {

            boolean yoxla = checkBoxShowAllDebts.isSelected();

            if (yoxla == true) {

            } else {
                txtQismenOdenis.setText("");
                txtQaliqBorc.setText("");

                df = (DefaultTableModel) tblBorcSiyahisi.getModel();

                int selected = tblBorcSiyahisi.getSelectedRow();

                txtBorcAlaninAdi.setText(df.getValueAt(selected, 0).toString());
                txtMehsul.setText(df.getValueAt(selected, 1).toString());
                txtID.setText(df.getValueAt(selected, 2).toString());
                txtBorcID.setText(df.getValueAt(selected, 3).toString());
                txtMiqdari.setText(df.getValueAt(selected, 4).toString());
                txtQiymeti.setText(df.getValueAt(selected, 5).toString());
                txtUmumiMebleg.setText(df.getValueAt(selected, 6).toString());
                txtQismenOdenis.setText(df.getValueAt(selected, 7).toString());
                txtQaliqBorc.setText(df.getValueAt(selected, 8).toString());
                txtBorc.setText(df.getValueAt(selected, 8).toString());
                txtOdenis.requestFocus();

            }

        }


    }//GEN-LAST:event_tblBorcSiyahisiMouseClicked

    public void getAllProduct() {

        String clientName = txtClientName.getText();
        double allTotalDebt = 0;
        double allPartialPayment = 0;
        double allRemainingDebt = 0;

        int a;
        try {
            con = connect();
            pres = con.prepareStatement("select * from borclar_siyahisi where Borc_alanin_adi = " + "'" + clientName2 + "'");

            ResultSet rsAllProduct = pres.executeQuery();

            ResultSetMetaData rd = rsAllProduct.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) DebtsInDetail.tblAllProdunctInDebt.getModel();
            df.setRowCount(0);

            while (rsAllProduct.next()) {

                Vector v2 = new Vector();

                String name = rsAllProduct.getString("Borc_alanin_adi");
                String productName = rsAllProduct.getString("Borca_goturduyu_mehsul");

                double totalDebt = rsAllProduct.getDouble("Umumi_mebleg");
                allTotalDebt += totalDebt;
                double partialPayment = rsAllProduct.getDouble("Qismen_odenis");
                allPartialPayment += partialPayment;
                double remainingDebt = rsAllProduct.getDouble("Qaliq_borc");
                allRemainingDebt += remainingDebt;

                v2.add(rsAllProduct.getString("Borca_goturduyu_mehsul"));
                v2.add(rsAllProduct.getInt("Miqdari"));
                v2.add(rsAllProduct.getDouble("Qiymeti"));
                v2.add(rsAllProduct.getDouble("Umumi_mebleg"));
                v2.add(rsAllProduct.getDouble("Qismen_odenis"));
                v2.add(rsAllProduct.getDouble("Qaliq_borc"));
                v2.add(rsAllProduct.getString("Borc_alma_tarixi"));
                v2.add(rsAllProduct.getString("Borc_odeme_tarixi"));
                df.addRow(v2);
            }

            DebtsInDetail.txtTotalDebt.setText(Double.toString(allTotalDebt));
            DebtsInDetail.txtTotalPartialPayment.setText(Double.toString(allPartialPayment));
            DebtsInDetail.txtTotalRemainingDebt.setText(Double.toString(allRemainingDebt));

        } catch (Exception ex) {

            ex.printStackTrace();

        }

    }


    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        odenisEt();
    }//GEN-LAST:event_jButton2MouseClicked

    private void odenisEt() {

        String cashierName = optionForCashier.getSelectedItem().toString();

        try {

            boolean check = chcBoxHamisi.isSelected();

            if (check == true) {

                String BorcAlaninAdi = txtBorcAlaninAdi.getText();

                if (txtBorcAlaninAdi.getText().isBlank()) {

                    JOptionPane.showMessageDialog(this, "Zehmet olmasa Borc alanin adini qeyd edin! ");

                    return;
                }

                pres = con.prepareCall("select * from borclar_siyahisi where Borc_alanin_adi = " + "'" + BorcAlaninAdi + "'");

                ResultSet rs = pres.executeQuery();

                while (rs.next()) {

                    double Umumi = rs.getDouble("Umumi_mebleg");
                    int borcID = rs.getInt("id");
                    double qismen = rs.getDouble("Qismen_odenis");
                    double qaliq = rs.getDouble("Qaliq_borc");
                    double roundedQaliq = Math.round(qaliq * 100.000) / 100.000;
                    String date = txtOdenisTarixi.getText();

                    pres = con.prepareStatement("update borclar_siyahisi set Qismen_odenis = Qismen_odenis + ?, Qaliq_borc=?, Borc_odeme_tarixi=?  where id = ?");

                    pres.setDouble(1, roundedQaliq);
                    pres.setDouble(2, 0.0);
                    pres.setString(3, time2);
                    pres.setInt(4, borcID);
                    pres.executeUpdate();

                    pres = con.prepareStatement("select * from updatedCapitalbudget order by id desc limit 1");
                    rs = pres.executeQuery();

                    rs.next();

                    double capitalBudget = rs.getDouble("AmountOfCapitalBudget");

                    double result = capitalBudget + roundedQaliq;
                    double roundedResult = Math.round(result * 100.000) / 100.000;

                    pres = con.prepareStatement("insert into updatedCapitalbudget (AmountOfCapitalBudget, date, `from`, `status`, processedValue) values(?,?,?,?,?)");
                    pres.setDouble(1, roundedResult);
                    pres.setString(2, time2);
                    pres.setString(3, "Kassa " + cashierName + "- terefinden borcdan gelen gelirle artirildi");
                    pres.setString(4, "+");
                    pres.setDouble(5, roundedQaliq);
                    pres.executeUpdate();

                }

                load();
                loadAxtarisaGore();
                satis2();
                borcGostericileri2();
                txtUmumiBorc.setText("");
                load();
                loadAxtarisaGore();
                borcGostericileri();

            } else {

                if (txtBorcAlaninAdi.getText().isEmpty() || txtMehsul.getText().isEmpty() || txtID.getText().isEmpty() || txtMiqdari.getText().isEmpty() || txtQiymeti.getText().isEmpty() || txtUmumiMebleg.getText().isEmpty() || txtQismenOdenis.getText().isEmpty()) {

                    JOptionPane.showMessageDialog(this, "Zəhmət olmasa bütün melumatları daxil edin!");
                    return;
                }

                if (txtOdenis.getText().isBlank()) {
                    JOptionPane.showMessageDialog(this, "Zəhmət olmasa ödeniş miqdarını daxil edin!");
                } else {

                    if (hesabla() == 0) {

                        String BorcAlaninAdi = txtBorcAlaninAdi.getText();
                        String Mehsul = txtMehsul.getText();
                        int ID = Integer.parseInt(txtID.getText());
                        int IDBorc = Integer.parseInt(txtBorcID.getText());
                        double Miqdari = Double.parseDouble(txtMiqdari.getText());
                        double Qiymeti = Double.parseDouble(txtQiymeti.getText());
                        double UmumiMebleg = Double.parseDouble(txtUmumiMebleg.getText());
                        double QismenOdenis = Double.parseDouble(txtQismenOdenis.getText());
                        double roundedQismenOdenis = Math.round(QismenOdenis * 100.000) / 100.000;
                        double QaliqBorc = Double.parseDouble(txtQaliqBorc.getText());
                        double roundedQaliqBorc = Math.round(QaliqBorc * 100.000) / 100.000;
                        String odenisTarixi = txtOdenisTarixi.getText();

                        pres = con.prepareStatement("update borclar_siyahisi set  Umumi_mebleg=?, Qismen_odenis = Qismen_odenis + ?, Qaliq_borc=?, Borc_odeme_tarixi=?  where id = ?");

                        pres.setDouble(1, UmumiMebleg);
                        pres.setDouble(2, roundedQismenOdenis);
                        pres.setDouble(3, roundedQaliqBorc);
                        pres.setString(4, time2);
                        pres.setInt(5, IDBorc);
                        pres.executeUpdate();

                        pres = con.prepareStatement("select * from updatedCapitalbudget order by id desc limit 1");
                        rs = pres.executeQuery();

                        rs.next();
                        double capitalBudget = rs.getDouble("AmountOfCapitalBudget");

                        double result = capitalBudget + roundedQismenOdenis;
                        double roundedResult = Math.round(result * 100.000) / 100.000;

                        pres = con.prepareStatement("insert into updatedCapitalbudget (AmountOfCapitalBudget, date, `from`, `status`, processedValue) values(?,?,?,?,?)");
                        pres.setDouble(1, roundedResult);
                        pres.setString(2, time2);
                        pres.setString(3, "Kassa " + cashierName + "- terefinden borcdan gelen gelirle artirildi");
                        pres.setString(4, "+");
                        pres.setDouble(5, roundedQismenOdenis);
                        pres.executeUpdate();

                        load();
                        loadAxtarisaGore();
                        satis();
                        loadAxtarisaGore();
                        borcGostericileri2();
                        txtUmumiBorc.setText("");
                        borcGostericileri();

                        txtBorcAlaninAdi.setText("");
                        txtID.setText("");
                        txtBorcID.setText("");
                        txtMiqdari.setText("");
                        txtQiymeti.setText("");
                        txtUmumiMebleg.setText("");
                        txtQismenOdenis.setText("");
                        txtQaliqBorc.setText("");
                        txtOdenis.setText("");

                    }
                }

            }

        } catch (HeadlessException | NumberFormatException | SQLException ex) {

            ex.printStackTrace();

        }

    }

    private void borcGostericileri2() {

        txtBorc.setText("");

    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtAxtarisKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAxtarisKeyReleased

        searchForTheCllient();

    }//GEN-LAST:event_txtAxtarisKeyReleased

    public void searchForCreditInfo() {

        String s = txtAxtaris.getText();

        int a;
        try {
            pres = con.prepareCall("select * from borclar_siyahisi b where b.Borc_alanin_adi like " + "'" + "%" + s + "%" + "'");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tblBorcSiyahisi.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 0; i < a; i++) {

                    v2.add(rs.getString("Borc_alanin_adi"));
                    v2.add(rs.getString("Borca_goturduyu_mehsul"));
                    v2.add(rs.getInt("Mehsul_ID"));
                    v2.add(rs.getInt("id"));
                    v2.add(rs.getDouble("Miqdari"));
                    v2.add(rs.getDouble("Qiymeti"));
                    v2.add(rs.getDouble("Umumi_mebleg"));
                    double qismenOdenis = rs.getDouble("Qismen_odenis");
                    double roundedQismenOdenis = Math.round(qismenOdenis * 100.000) / 100.000;
                    v2.add(roundedQismenOdenis);
                    double qaliqBorc = rs.getDouble("Qaliq_borc");
                    double roundedQaliqBorc = Math.round(qaliqBorc * 100.000) / 100.000;
                    v2.add(roundedQaliqBorc);
                    v2.add(rs.getString("Borc_alma_tarixi"));
                    v2.add(rs.getString("Borc_odeme_tarixi"));

                }
                df.addRow(v2);

            }

        } catch (Exception ex) {
            Logger.getLogger(Satici_Elave_Etmek.class.getName()).log(Level.SEVERE, null, ex);
        }

        txtUmumiBorc.setText("");
        txtBorc.setText("");
        txtID.setText("");
        txtBorcID.setText("");
        txtMiqdari.setText("");
        txtQiymeti.setText("");
        txtUmumiMebleg.setText("");
        txtQismenOdenis.setText("");
        txtQaliqBorc.setText("");
        txtOdenis.setText("");
        txtBorcAlaninAdi.setText("");
        txtMehsul.setText("");
        borcGostericileri();

    }

    public void addAllDebtsToTheTable() {
        int a;
        try {
            con = connect();
            pres = con.prepareStatement("select * from borclar_siyahisi_common");

            ResultSet rs = pres.executeQuery();

            ResultSetMetaData rd = rs.getMetaData();
            a = rd.getColumnCount();
            df = (DefaultTableModel) tblBorcSiyahisi.getModel();
            int sutunsayi = df.getColumnCount();
            df.setRowCount(0);

            while (rs.next()) {

                double qaliqBorc = rs.getDouble("Qaliq_borc");

                if (qaliqBorc == 0) {

                } else {

                    Vector v2 = new Vector();
                    v2.add(rs.getInt("say"));
                    v2.add(rs.getString("Borc_alanin_adi"));
                    v2.add(rs.getDouble("umumiMehsulMiqdari"));
                    v2.add(rs.getDouble("Umumi_mebleg"));
                    v2.add(rs.getDouble("Qismen_odenis"));
                    v2.add(rs.getDouble("Qaliq_borc"));
                    df.addRow(v2);

                }

            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    @SuppressWarnings("empty-statement")
    public void createNewTableForCommonDebts() {

        //jPanel3.setVisible(false);
        //jPanel3.remove(tblBorcSiyahisi);
        df = (DefaultTableModel) tblBorcSiyahisi.getModel();
        int numberColumn = df.getColumnCount();

        if (numberColumn != 0) {

            TableColumn tblColumnAdi = tblBorcSiyahisi.getColumn("Borc alanin adi");
            TableColumn tblColumnBorcOdeme = tblBorcSiyahisi.getColumn("Borc odeme tarixi");
            TableColumn tblColumnBorcAlma = tblBorcSiyahisi.getColumn("Borc alma tarixi");
            TableColumn tblColumnQiymeti = tblBorcSiyahisi.getColumn("Qiymeti");
            TableColumn tblColumnBorcID = tblBorcSiyahisi.getColumn("BorcID");
            TableColumn tblColumnID = tblBorcSiyahisi.getColumn("ID");
            TableColumn tblColumnMehsul = tblBorcSiyahisi.getColumn("Mehsul");

            tblBorcSiyahisi.removeColumn(tblColumnBorcOdeme);
            tblBorcSiyahisi.removeColumn(tblColumnBorcAlma);
            tblBorcSiyahisi.removeColumn(tblColumnQiymeti);
            tblBorcSiyahisi.removeColumn(tblColumnBorcID);
            tblBorcSiyahisi.removeColumn(tblColumnID);
            tblBorcSiyahisi.removeColumn(tblColumnMehsul);

        }

        tblBorcSiyahisi.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Say", "Borc alanın adı", "Alınmış melsul sayı", "Ümumi Mebleğ", "Qismen ödeniş", "Qalıq borc"
                }
        ));

        tblBorcSiyahisi.getColumnModel().getColumn(0).setMinWidth(0);
        tblBorcSiyahisi.getColumnModel().getColumn(1).setMinWidth(300);
        tblBorcSiyahisi.getColumnModel().getColumn(0).setPreferredWidth(0);

//        df = (DefaultTableModel)tblBorcSiyahisi.getModel();
//        tblBorcSiyahisi.setModel(df);
        addAllDebtsToTheTable();
        calculateAllCommonDebts();

//        JTable jtCommonDebts = new javax.swing.JTable();
//
//        jtCommonDebts.setModel(new javax.swing.table.DefaultTableModel(
//                new Object[][]{
//                    {"Aga", "Veli", "Hesen", "Qulu"},
//                    {"1", "2", "3", "4"},},
//                new String[]{
//                    "say", "Borc_alanin_adi", "umumiMehsulMiqdari", "Umumi_mebleg", "Qismen_odenis", "Qaliq_borc"
//                }
//        ));
//
//        jPanel3.add(jtCommonDebts);
//        jPanel3.setVisible(true);
    }

    DefaultListModel modelList = new DefaultListModel();

    public void searchForTheCllient() {

        panelTest.setVisible(true);
        modelList.removeAllElements();
        String s = txtAxtaris.getText();

        try {
            Connection c = connect();
            pres = c.prepareStatement("select * from clients c where c.NameAndSurename like " + "'" + "%" + s + "%" + "'");

            ResultSet rs = pres.executeQuery();

            while (rs.next()) {

                modelList.addElement(rs.getString("NameAndSurename"));
                listNameOfClients.setModel(modelList);
            }

        } catch (Exception ex) {

            ex.printStackTrace();

        }

    }

    public double firstCommonDebt = 0;
    String optionCashier = null;
    String clientName = null;
    private void txtOdenisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOdenisActionPerformed

        if (firstCommonDebt == 0) {
            firstCommonDebt = Double.parseDouble(txtUmumiBorc.getText());
            clientName = txtBorcAlaninAdi.getText();
        }

        optionCashier = optionForCashier.getSelectedItem().toString();

        if (optionCashier.equals("Secim edin..")) {
            JOptionPane.showMessageDialog(this, "Zehmet olmasa kassir adini secin!", "DIQQET!", HEIGHT);
        } else {

            odenisEt();
        }


    }//GEN-LAST:event_txtOdenisActionPerformed

    private void txtOdenisKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOdenisKeyReleased


    }//GEN-LAST:event_txtOdenisKeyReleased

    private int hesabla() {

        int plusMinus = 0;
        double odenis = Double.parseDouble(txtOdenis.getText());

        // txtQismenOdenis.setText(Double.toString(odenis));
        double qaliqBorcIlkin = Double.parseDouble(txtQaliqBorc.getText());
        double yeniOdenis = Double.parseDouble(txtOdenis.getText());

        double yeniCem = qaliqBorcIlkin - yeniOdenis;

        if (yeniCem < 0) {
            JOptionPane.showMessageDialog(this, "Daxil edilen mebleğ borc mebleğinden çox ola bilmez!");
            plusMinus = 1;

        } else {
            txtQismenOdenis.setText(Double.toString(odenis));
            txtQaliqBorc.setText("");
            txtQaliqBorc.setText(Double.toString(yeniCem));
        }

        return plusMinus;
    }

    private void BaglaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BaglaMouseClicked

        this.setVisible(false);

    }//GEN-LAST:event_BaglaMouseClicked

    private void txtOdenisKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOdenisKeyPressed


    }//GEN-LAST:event_txtOdenisKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            df = (DefaultTableModel) tblBorcSiyahisi.getModel();
            int selected = tblBorcSiyahisi.getSelectedRow();

            String borcAlaninAdi = (df.getValueAt(selected, 0).toString());
            int borcID = Integer.parseInt(df.getValueAt(selected, 3).toString());
            int mehsulID = Integer.parseInt(df.getValueAt(selected, 2).toString());
            String mehsulunAdi = (df.getValueAt(selected, 1).toString());
            double miqdari = Double.parseDouble(df.getValueAt(selected, 4).toString());

            int cavab = JOptionPane.showConfirmDialog(this, "Borclu " + borcAlaninAdi + "-adli sexsin..\n " + "borca aldigi -" + mehsulunAdi + " -adli mehsulu silmək istədiyinizdən əminsiniz?", "Diqqət!", JOptionPane.YES_NO_CANCEL_OPTION);

            if (cavab == 0) {

                pres = con.prepareStatement("delete from borclar_siyahisi b where b.id = ? ");

                pres.setInt(1, borcID);
                pres.executeUpdate();

                pres = con.prepareStatement("update mehsullar set Satis_miqdari = Satis_miqdari - ?  where id = ?;");

                pres.setDouble(1, miqdari);
                pres.setInt(2, mehsulID);
                pres.executeUpdate();

                pres = con.prepareStatement("update mehsullar set Qaliq_say = Miqdari - Satis_miqdari  where id = ?;");
                pres.setInt(1, mehsulID);
                pres.executeUpdate();

                pres = con.prepareStatement("truncate table sebet;");
                pres.executeUpdate();

            }

        } catch (SQLException ex) {
            Logger.getLogger(BorclarlaEmeliyyat.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadAxtarisaGore();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        clearAll();
    }//GEN-LAST:event_jButton3ActionPerformed

    public void clearAll() {

        txtAxtaris.setText("");
        txtUmumiBorc.setText("");
        txtBorc.setText("");
        txtID.setText("");
        txtBorcID.setText("");
        txtMiqdari.setText("");
        txtQiymeti.setText("");
        txtUmumiMebleg.setText("");
        txtQismenOdenis.setText("");
        txtQaliqBorc.setText("");
        txtOdenis.setText("");
        txtBorcAlaninAdi.setText("");
        txtMehsul.setText("");

    }


    private void chcBoxHamisiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chcBoxHamisiMouseClicked

        boolean check = txtOdenis.isEnabled();

        if (check == false) {
            txtOdenis.enable();
        } else {
            txtOdenis.setText("");
            txtOdenis.disable();
        }
    }//GEN-LAST:event_chcBoxHamisiMouseClicked

    private void listNameOfClientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listNameOfClientsMouseClicked

        boolean yoxla = checkBoxShowAllDebts.isSelected();

        if (yoxla == true) {
            checkBoxShowAllDebts.doClick();
        }

        String selectedClientName = listNameOfClients.getSelectedValue();
        txtAxtaris.setText(selectedClientName);
        modelList.removeAllElements();
        panelTest.setVisible(false);
        createNewTableModel();
        searchForCreditInfo();

    }//GEN-LAST:event_listNameOfClientsMouseClicked

    public void createNewTableModel() {

        tblBorcSiyahisi.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Borc alanin adi", "Mehsul", "ID", "BorcID", "Miqdari", "Qiymeti", "Umumi mebleg", "Qismen odenis", "Qaliq borc", "Borc alma tarixi", "Borc odeme tarixi"
                }
        ));
        //tblBorcSiyahisi.setPreferredSize(new Dimension(650, 650));
        tblBorcSiyahisi.getColumnModel().getColumn(0).setPreferredWidth(300);
        tblBorcSiyahisi.getColumnModel().getColumn(1).setPreferredWidth(200);
        tblBorcSiyahisi.getColumnModel().getColumn(2).setMinWidth(0);
        tblBorcSiyahisi.getColumnModel().getColumn(2).setPreferredWidth(0);
        tblBorcSiyahisi.getColumnModel().getColumn(3).setMinWidth(0);
        tblBorcSiyahisi.getColumnModel().getColumn(3).setPreferredWidth(0);
    }


    private void txtAxtarisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAxtarisActionPerformed


    }//GEN-LAST:event_txtAxtarisActionPerformed

    private void checkBoxShowAllDebtsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxShowAllDebtsActionPerformed

        showAllCommonDebts();

    }//GEN-LAST:event_checkBoxShowAllDebtsActionPerformed

    public void showAllCommonDebts() {

        boolean yoxla = checkBoxShowAllDebts.isSelected();

        if (yoxla == true) {
            clearAll();
            createNewTableForCommonDebts();
        } else {

            df = (DefaultTableModel) tblBorcSiyahisi.getModel();
            df.setColumnCount(0);
            clearAll();

        }

    }

    Timer timer;
    SimpleDateFormat sdf2;
    String time;
    String time2;

    public void setTime() {

        timer = new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                Date dt = new Date();
                sdf = new SimpleDateFormat("HH:mm:ss");
                sdf2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

                time = sdf.format(dt);

                time2 = sdf2.format(dt);

            }
        });
        timer.start();

    }


    private void txtUmumiBorcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUmumiBorcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUmumiBorcActionPerformed

    double finalDebtAfterPayment;
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        String currencyFirstdebt;
        String currencyResult;
        String currencyAfterPayment;
        try {

        } catch (Exception ex) {

            ex.printStackTrace();
        }

        try {

            finalDebtAfterPayment = Double.parseDouble(txtUmumiBorc.getText());
            //finalDebtAfterPayment = 00.00;

        } catch (Exception ex) {

            JOptionPane.showMessageDialog(this, "Müştərinin borcu tam ödənilmişdir.\n Qəbz üçün Ok - düyməsini sıxın");
            finalDebtAfterPayment = 00.00;
        }

        double roundedFinalDebt = Math.round(finalDebtAfterPayment * 100.000) / 100.000;
        double result = firstCommonDebt - finalDebtAfterPayment;
        double roundedResult = Math.round(result * 100.000) / 100.000;
        double roundedFirstCommonDebt = Math.round(firstCommonDebt * 100.000) / 100.000;

        String stringFirstdebt = Double.toString(roundedFirstCommonDebt);

        if (stringFirstdebt.contains(".0")) {
            currencyFirstdebt = "0 AZN";
        } else {
            currencyFirstdebt = "0 qepik";
        }

        String resultString = Double.toString(roundedResult);

        if (resultString.contains(".0")) {
            currencyResult = "0 AZN";
        } else {
            currencyResult = "0 qepik";
        }

        String stringFinalDebtAfterPayment = Double.toString(roundedFinalDebt);

        if (stringFinalDebtAfterPayment.contains(".0")) {
            currencyAfterPayment = "0 AZN";
        } else {
            currencyAfterPayment = "0 qepik";
        }

        String projectPath = System.getProperty("user.dir");
        System.out.println(projectPath);
        String filePath = "\\src\\main\\java\\com\\mycompany\\qarisiqmallar\\veneramarket\\Test333.jrxml";
        System.out.println(filePath);
        JasperDesign jdesign;
        try {
            Connection c = connect();
            jdesign = JRXmlLoader.load(projectPath + filePath);
            JasperReport jr = null;

            HashMap<String, Object> parametrs;
            parametrs = new HashMap<>();
            parametrs.put("currentTime", time2);
            parametrs.put("clientName", clientName);
            parametrs.put("firstDebt", stringFirstdebt + currencyFirstdebt);
            parametrs.put("payment", resultString + currencyResult);
            parametrs.put("finalDebt", stringFinalDebtAfterPayment + currencyAfterPayment);
            parametrs.put("cashier", optionCashier);
            String printerName = "TSC TDP-225";

            jr = JasperCompileManager.compileReport(jdesign);

            JasperPrint jprint = JasperFillManager.fillReport(jr, parametrs, c);

            //SilentPrint ss = new SilentPrint();
            SilentPrint2 sp = new SilentPrint2();
            //ss.printReport(jr, productPrice, parametrs, c);

            sp.PrintReportToPrinter(jprint, printerName, 1);

            firstCommonDebt = 0;

            //JasperViewer.viewReport(jprint, false);
        } catch (JRException ex) {
            ex.printStackTrace();
        }


    }//GEN-LAST:event_jButton4ActionPerformed

    private void tblBorcSiyahisiMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBorcSiyahisiMouseReleased

        if (SwingUtilities.isRightMouseButton(evt)) {

            int clickSayi = evt.getClickCount();

            jPopupMenu1.show(tblBorcSiyahisi, evt.getX(), evt.getY());

        }


    }//GEN-LAST:event_tblBorcSiyahisiMouseReleased

    private void changeNameOfClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNameOfClientActionPerformed

        ChangeNameOfClient changeName = new ChangeNameOfClient(this, true);

        df = (DefaultTableModel) tblBorcSiyahisi.getModel();

        int selected = tblBorcSiyahisi.getSelectedRow();

        int id = Integer.parseInt(df.getValueAt(selected, 0).toString());
        String name = (df.getValueAt(selected, 1).toString());

        ChangeNameOfClient.txtOldName.setText(name);

        changeName.setVisible(true);

        filterAllClients();
        getCommonDebts();
        checkBoxShowAllDebts.doClick();
        checkBoxShowAllDebts.doClick();


    }//GEN-LAST:event_changeNameOfClientActionPerformed

    private void optionForCashierMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_optionForCashierMouseClicked

        txtOdenis.requestFocus();
    }//GEN-LAST:event_optionForCashierMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        String currencyFirstdebt;
        
        String clientName = txtAxtaris.getText();

        String totalCredit = txtUmumiBorc.getText();
        
        optionCashier = optionForCashier.getSelectedItem().toString();
        
        if (optionCashier.equals("Secim edin..")) {
            JOptionPane.showMessageDialog(this, "Zehmet olmasa kassir adini secin!", "DIQQET!", HEIGHT);
            return;
        }
        
        //String stringFirstdebt = Double.toString(roundedFirstCommonDebt);
        
        if (totalCredit.contains(".0")) {
            currencyFirstdebt = "0 AZN";
        } else {
            currencyFirstdebt = "0 qepik";
        }

        try {

            String projectPath = System.getProperty("user.dir");
            System.out.println(projectPath);
            String filePath = "\\src\\main\\java\\com\\mycompany\\qarisiqmallar\\veneramarket\\Test333_1.jrxml";
            System.out.println(filePath);
            JasperDesign jdesign;

            Connection c = connect();
            jdesign = JRXmlLoader.load(projectPath + filePath);
            JasperReport jr = null;

            HashMap<String, Object> parametrs;
            parametrs = new HashMap<>();
            parametrs.put("currentTime", time2);
            parametrs.put("clientName", clientName);
            parametrs.put("firstDebt", totalCredit + currencyFirstdebt);
//                parametrs.put("payment", resultString + currencyResult);
//                parametrs.put("finalDebt", stringFinalDebtAfterPayment + currencyAfterPayment);
            parametrs.put("cashier", optionCashier);
            String printerName = "TSC TDP-225";

            jr = JasperCompileManager.compileReport(jdesign);

            JasperPrint jprint = JasperFillManager.fillReport(jr, parametrs, c);

            //SilentPrint ss = new SilentPrint();
            SilentPrint2 sp = new SilentPrint2();
            //ss.printReport(jr, productPrice, parametrs, c);

            sp.PrintReportToPrinter(jprint, printerName, 1);

        } catch (Exception ex) {

        }


    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BorclarlaEmeliyyat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BorclarlaEmeliyyat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BorclarlaEmeliyyat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BorclarlaEmeliyyat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BorclarlaEmeliyyat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bagla;
    private javax.swing.JMenuItem changeNameOfClient;
    private javax.swing.JCheckBox chcBoxHamisi;
    private javax.swing.JCheckBox checkBoxShowAllDebts;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listNameOfClients;
    private javax.swing.JComboBox<String> optionForCashier;
    private javax.swing.JPanel panelTest;
    private javax.swing.JTable tblBorcSiyahisi;
    private javax.swing.JTextField txtAxtaris;
    private javax.swing.JTextField txtBorc;
    private javax.swing.JTextField txtBorcAlaninAdi;
    private javax.swing.JTextField txtBorcID;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtMehsul;
    private javax.swing.JTextField txtMiqdari;
    private javax.swing.JTextField txtOdenis;
    private javax.swing.JTextField txtOdenisTarixi;
    private javax.swing.JTextField txtQaliqBorc;
    private javax.swing.JTextField txtQismenOdenis;
    private javax.swing.JTextField txtQiymeti;
    private javax.swing.JTextField txtUmumiBorc;
    private javax.swing.JTextField txtUmumiMebleg;
    // End of variables declaration//GEN-END:variables

    @Override
    public void windowOpened(WindowEvent e) {

        clearBarcodeText();
    }

    @Override
    public void windowClosing(WindowEvent e) {
        clearBarcodeText();

    }

    @Override
    public void windowClosed(WindowEvent e) {

        clearBarcodeText();
    }

    @Override
    public void windowIconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void windowActivated(WindowEvent e) {

        clearBarcodeText();

    }

    @Override
    public void windowDeactivated(WindowEvent e) {

        clearBarcodeText();

    }
}
